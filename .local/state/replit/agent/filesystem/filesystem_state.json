{"file_contents":{"WEDDING_CUSTOMIZATION_GUIDE.md":{"content":"# Wedding Website Customization Guide\n\n## Easy Text Editing\n\nAll the text content on your wedding website can be easily customized by editing the configuration file:\n\n**File to edit: `client/src/config/wedding-config.ts`**\n\n## What You Can Customize\n\n### 1. **Couple Names**\n```typescript\ncouple: {\n  groomName: \"Հարութ\",      // Groom's name\n  brideName: \"Տաթև\",           // Bride's name  \n  combinedNames: \"Հարութ & Տաթև\"  // Names displayed together\n}\n```\n\n### 2. **Wedding Date & Time**\n```typescript\nwedding: {\n  date: \"2024-08-18T15:00:00\",    // Wedding date/time (YYYY-MM-DDTHH:MM:SS)\n  displayDate: \"18 ՕԳՈՍՏՈՍ 2024\", // How the date appears on the site\n  month: \"Օգոստոս 2024\",           // Month name for calendar\n  day: \"18\"                       // Wedding day number\n}\n```\n\n### 3. **Hero Section (Main Banner)**\n```typescript\nhero: {\n  title: \"Հրավիրում ենք մեր հարսանիքին։\",     // Main title\n  welcomeMessage: \"Your welcome message...\",  // Welcome text\n  musicButton: \"Երաժշտություն\"          // Music button text\n}\n```\n\n### 4. **Countdown Timer**\n```typescript\ncountdown: {\n  subtitle: \"Ֆցր հարսանիքի ծանուցում ծանծգն է\",  // Subtitle text\n  labels: {\n    days: \"օր\",      // Days label\n    hours: \"ժամ\",    // Hours label\n    minutes: \"րոպ\",  // Minutes label\n    seconds: \"վայրկ\" // Seconds label\n  }\n}\n```\n\n### 5. **Timeline Events**\n```typescript\ntimeline: {\n  title: \"Ծրագիր\",  // Section title\n  events: [\n    {\n      time: \"13:00\",\n      title: \"Պսակադրություն\",\n      description: \"Նուր Նարգիզ ծետալթեր\"\n    },\n    // Add more events or modify existing ones\n  ]\n}\n```\n\n### 6. **Location Details**\n```typescript\nlocations: {\n  sectionTitle: \"Վայրեր\",\n  church: {\n    title: \"Եկեղեցի\",\n    name: \"Սուրբ Գրիգոր Լուսավորիչ Եկեղեցի\",\n    description: \"Պսակադրության արարողություն\",\n    mapButton: \"Քարտեզ\"\n  },\n  restaurant: {\n    title: \"Ռեստորան\",\n    name: \"Արարատ Ռեստորան\", \n    description: \"Ընդունելության և տոնակատարության վայր\",\n    mapButton: \"Քարտեզ\"\n  }\n}\n```\n\n### 7. **RSVP Form**\n```typescript\nrsvp: {\n  title: \"Հաստատել մասնակցությունը\",\n  description: \"Խնդրում ենք հաստատել ձեր մասնակցությունը մինչև մարտի 1-ը\",\n  form: {\n    firstName: \"Անուն\",\n    lastName: \"Ազգանուն\",\n    email: \"Էլ․ հասցե\",\n    // ... all form labels and text\n  }\n}\n```\n\n### 8. **Navigation Menu**\n```typescript\nnavigation: {\n  home: \"Գլխավոր\",\n  countdown: \"Հաշվարկ\",\n  calendar: \"Օրացույց\",\n  locations: \"Վայրեր\",\n  timeline: \"Ծրագիր\",\n  rsvp: \"Հաստատում\"\n}\n```\n\n## How to Make Changes\n\n1. **Open the file:** `client/src/config/wedding-config.ts`\n2. **Edit the text** you want to change (keep the quotes)\n3. **Save the file**\n4. **The website will automatically update** with your changes\n\n## Important Notes\n\n- Keep all quotation marks (`\"`) around text\n- Don't change the property names (like `groomName:` - only change what comes after the colon)\n- For the wedding date, use the format: `YYYY-MM-DDTHH:MM:SS`\n- Save the file after making changes to see them on the website\n\n## Email Configuration\n\nRSVP responses will be automatically sent to these email addresses:\n```typescript\nemail: {\n  recipients: [\n    \"harutavetisyan0@gmail.com\",\n    \"tatevhovsepyan22@gmail.com\"\n  ]\n}\n```\n\nThat's it! Your website will automatically update with any changes you make to this configuration file.","size_bytes":3722},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Wedding Invitation Website\n\n## Overview\n\nThis is a modern wedding invitation website built for Harutyun & Tatev's wedding. The application features an elegant, Armenian-language interface designed to provide guests with all necessary wedding information including event details, venue locations, timeline, and RSVP functionality. The website emphasizes a minimalistic design with cream, gold, and sage green color palette to create a romantic and sophisticated user experience.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe frontend is built with React 18 and TypeScript, using a component-based architecture with modern React patterns:\n\n- **UI Framework**: React with TypeScript for type safety\n- **Styling**: Tailwind CSS with custom wedding color variables and responsive design\n- **Component Library**: Radix UI primitives with shadcn/ui components for consistent, accessible interfaces\n- **State Management**: React Hook Form for form handling, TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\nThe backend follows a REST API pattern with Express.js:\n\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Data Validation**: Zod schemas for runtime type checking and validation\n- **Session Management**: PostgreSQL session store (connect-pg-simple)\n- **Storage Layer**: Abstracted storage interface with in-memory implementation for development\n\n### Database Design\nThe database schema includes:\n\n- **Users Table**: Basic user authentication (currently unused but prepared)\n- **RSVPs Table**: Guest responses with fields for names, email, guest count, guest names, attendance status, and creation timestamp\n- **Schema Validation**: Zod schemas ensure data integrity with Armenian language error messages\n\n### Component Architecture\nThe application is structured with reusable, purpose-specific components:\n\n- **Layout Components**: Navigation, hero section, footer with scroll-to-top functionality\n- **Feature Components**: Countdown timer, calendar widget, location cards, timeline display\n- **Interactive Components**: RSVP form with validation, map modal for venue locations\n- **UI Components**: Comprehensive shadcn/ui component library with custom theming\n\n### Styling and Theming\nCustom CSS variables define the wedding color palette:\n- Cream background (#F8F6F1)\n- Soft gold accents (#DAA520)\n- Sage green highlights\n- Warm beige and charcoal text colors\n- Custom font loading for Playfair Display (serif) and Inter (sans-serif)\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: PostgreSQL database hosting via @neondatabase/serverless\n- **Drizzle Kit**: Database migrations and schema management\n\n### UI and Styling\n- **Radix UI**: Headless component primitives for accessibility\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n- **Google Fonts**: Custom typography (Playfair Display, Inter)\n\n### Form and Validation\n- **React Hook Form**: Form state management and validation\n- **Zod**: Runtime schema validation with Armenian error messages\n- **@hookform/resolvers**: Zod integration for React Hook Form\n\n### Development Tools\n- **Vite**: Build tool with React plugin and development server\n- **TypeScript**: Static type checking\n- **ESBuild**: Fast JavaScript bundler for production\n- **Replit Integration**: Development environment plugins\n\n### Planned Integrations\n- **Email Service**: RSVP notification system (not yet implemented)\n- **Google Maps API**: Interactive venue location maps (placeholder implementation)\n- **Background Music**: Audio playback for wedding atmosphere (placeholder)\n- **Photo Gallery**: External storage for wedding photos (Yandex Disk/Google Drive integration planned)","size_bytes":3988},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        \n        // Custom wedding colors\n        cream: \"var(--cream)\",\n        softGold: \"var(--soft-gold)\",\n        sageGreen: \"var(--sage-green)\",\n        warmBeige: \"var(--warm-beige)\",\n        charcoal: \"var(--charcoal)\",\n        lightGold: \"var(--light-gold)\",\n      },\n      fontFamily: {\n        serif: [\"var(--font-serif)\"],\n        sans: [\"var(--font-sans)\"],\n      },\n      animation: {\n        \"fade-in\": \"fadeIn 1s ease-in-out\",\n        \"slide-up\": \"slideUp 0.8s ease-out\",\n        \"bounce-gentle\": \"bounceGentle 2s infinite\",\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2512},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\n// Environment variable validation\nfunction validateEnvironment() {\n  const requiredEnvVars = ['PORT'];\n  const missingVars = requiredEnvVars.filter(envVar => !process.env[envVar]);\n  \n  if (missingVars.length > 0) {\n    console.warn(`Warning: Missing environment variables: ${missingVars.join(', ')}. Using defaults where possible.`);\n  }\n  \n  // Set NODE_ENV default if not provided\n  if (!process.env.NODE_ENV) {\n    process.env.NODE_ENV = 'production';\n  }\n  \n  return {\n    port: parseInt(process.env.PORT || '5000', 10),\n    nodeEnv: process.env.NODE_ENV,\n    isProduction: process.env.NODE_ENV === 'production'\n  };\n}\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Health check endpoint for deployment monitoring\napp.get('/health', (req, res) => {\n  res.status(200).json({ \n    status: 'ok', \n    timestamp: new Date().toISOString(),\n    environment: process.env.NODE_ENV || 'production'\n  });\n});\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    // Validate environment variables first\n    const env = validateEnvironment();\n    \n    const server = await registerRoutes(app);\n\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n\n      res.status(status).json({ message });\n      console.error('Server error:', err);\n    });\n\n    // Use NODE_ENV directly for better production detection\n    if (env.nodeEnv === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n\n    // Simplified server.listen call with timeout handling\n    const startServer = () => {\n      return new Promise<void>((resolve, reject) => {\n        const serverInstance = server.listen(env.port, \"0.0.0.0\", () => {\n          log(`Server running on port ${env.port} in ${env.nodeEnv} mode`);\n          resolve();\n        });\n        \n        serverInstance.on('error', (error: any) => {\n          if (error.code === 'EADDRINUSE') {\n            reject(new Error(`Port ${env.port} is already in use`));\n          } else {\n            reject(error);\n          }\n        });\n        \n        // Set timeout for server startup\n        setTimeout(() => {\n          reject(new Error('Server startup timeout'));\n        }, 30000); // 30 second timeout\n      });\n    };\n    \n    await startServer();\n  } catch (error) {\n    console.error('Failed to start server:', error);\n    process.exit(1);\n  }\n})();\n","size_bytes":3437},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertRsvpSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { sendRsvpNotificationEmails, sendRsvpConfirmationEmail, testEmailService } from \"./email\";\nimport {\n  ObjectStorageService,\n  ObjectNotFoundError,\n} from \"./objectStorage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // RSVP submission endpoint\n  app.post(\"/api/rsvp\", async (req, res) => {\n    try {\n      const validatedData = insertRsvpSchema.parse(req.body);\n      \n      // Check if email already exists\n      const existingRsvp = await storage.getRsvpByEmail(validatedData.email);\n      if (existingRsvp) {\n        return res.status(400).json({ \n          message: \"Այս էլ․ հասցեով արդեն ուղարկվել է հաստատում\" \n        });\n      }\n\n      const rsvp = await storage.createRsvp(validatedData);\n      \n      // Send email notifications\n      try {\n        await Promise.all([\n          sendRsvpNotificationEmails(rsvp),\n          sendRsvpConfirmationEmail(rsvp)\n        ]);\n      } catch (emailError) {\n        console.error(\"Email notification error:\", emailError);\n        // Continue with success response even if emails fail\n      }\n      \n      res.json({ \n        message: \"Շնորհակալություն! Ձեր հաստատումը ստացվել է:\",\n        rsvp: {\n          id: rsvp.id,\n          firstName: rsvp.firstName,\n          lastName: rsvp.lastName,\n          attendance: rsvp.attendance\n        }\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Տվյալները ճիշտ չեն լրացված\",\n          errors: error.errors \n        });\n      }\n      console.error(\"RSVP submission error:\", error);\n      res.status(500).json({ message: \"Սերվերի սխալ\" });\n    }\n  });\n\n  // Get all RSVPs (admin endpoint)\n  app.get(\"/api/rsvps\", async (req, res) => {\n    try {\n      const rsvps = await storage.getAllRsvps();\n      res.json(rsvps);\n    } catch (error) {\n      console.error(\"Get RSVPs error:\", error);\n      res.status(500).json({ message: \"Սերվերի սխալ\" });\n    }\n  });\n\n  // Test email endpoint\n  app.get(\"/api/test-email\", async (req, res) => {\n    try {\n      console.log(\"🧪 Testing email service...\");\n      await testEmailService();\n      res.json({ message: \"Email test initiated. Check logs for results.\" });\n    } catch (error) {\n      console.error(\"Email test error:\", error);\n      res.status(500).json({ message: \"Email test failed\" });\n    }\n  });\n\n  // Maintenance mode endpoints\n  app.get(\"/api/maintenance\", async (req, res) => {\n    try {\n      const status = await storage.getMaintenanceStatus();\n      res.json({ enabled: status });\n    } catch (error) {\n      console.error(\"Get maintenance status error:\", error);\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.post(\"/api/maintenance\", async (req, res) => {\n    try {\n      const { enabled, password } = req.body;\n      \n      // Simple password check for admin access\n      if (password !== \"haruttev2025admin\") {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      await storage.setMaintenanceStatus(enabled);\n      res.json({ \n        message: enabled ? \"Maintenance mode enabled\" : \"Maintenance mode disabled\",\n        enabled \n      });\n    } catch (error) {\n      console.error(\"Set maintenance status error:\", error);\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Photo upload endpoints\n  \n  // Serve public objects (photos)\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Serve uploaded photos\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Get upload URL for photo\n  app.post(\"/api/photos/upload\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Set photo as uploaded (public visibility)\n  app.put(\"/api/photos\", async (req, res) => {\n    if (!req.body.photoURL) {\n      return res.status(400).json({ error: \"photoURL is required\" });\n    }\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.photoURL,\n        {\n          owner: \"guest\", // Generic owner for guest uploads\n          visibility: \"public\", // Make photos publicly accessible\n        },\n      );\n\n      res.status(200).json({\n        objectPath: objectPath,\n        message: \"Photo uploaded successfully\"\n      });\n    } catch (error) {\n      console.error(\"Error setting photo:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n","size_bytes":6133},"server/storage.ts":{"content":"import { type User, type InsertUser, type Rsvp, type InsertRsvp, users, rsvps, settings } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createRsvp(rsvp: InsertRsvp): Promise<Rsvp>;\n  getAllRsvps(): Promise<Rsvp[]>;\n  getRsvpByEmail(email: string): Promise<Rsvp | undefined>;\n  getMaintenanceStatus(): Promise<boolean>;\n  setMaintenanceStatus(enabled: boolean): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async createRsvp(insertRsvp: InsertRsvp): Promise<Rsvp> {\n    const [rsvp] = await db\n      .insert(rsvps)\n      .values({\n        ...insertRsvp,\n        guestNames: insertRsvp.guestNames || null,\n      })\n      .returning();\n    return rsvp;\n  }\n\n  async getAllRsvps(): Promise<Rsvp[]> {\n    return await db.select().from(rsvps).orderBy(desc(rsvps.createdAt));\n  }\n\n  async getRsvpByEmail(email: string): Promise<Rsvp | undefined> {\n    const [rsvp] = await db.select().from(rsvps).where(eq(rsvps.email, email));\n    return rsvp || undefined;\n  }\n\n  async getMaintenanceStatus(): Promise<boolean> {\n    const [setting] = await db.select().from(settings).where(eq(settings.key, 'maintenance_enabled'));\n    return setting ? setting.value === 'true' : false;\n  }\n\n  async setMaintenanceStatus(enabled: boolean): Promise<void> {\n    await db\n      .insert(settings)\n      .values({\n        key: 'maintenance_enabled',\n        value: enabled.toString(),\n      })\n      .onConflictDoUpdate({\n        target: settings.key,\n        set: {\n          value: enabled.toString(),\n          updatedAt: new Date(),\n        },\n      });\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":2421},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const rsvps = pgTable(\"rsvps\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  guestCount: text(\"guest_count\").notNull(),\n  guestNames: text(\"guest_names\"),\n  attendance: text(\"attendance\").notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const settings = pgTable(\"settings\", {\n  key: text(\"key\").primaryKey(),\n  value: text(\"value\").notNull(),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertRsvpSchema = createInsertSchema(rsvps).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  firstName: z.string().min(1, \"Անունը պարտադիր է\"),\n  lastName: z.string().min(1, \"Ազգանունը պարտադիր է\"),\n  email: z.string().email(\"Էլ․ հասցեն ճիշտ չէ\"),\n  guestCount: z.string().min(1, \"Հյուրերի քանակը պարտադիր է\"),\n  guestNames: z.string().optional(),\n  attendance: z.enum([\"attending\", \"not-attending\"], {\n    errorMap: () => ({ message: \"Խնդրում ենք ընտրել մասնակցության տարբերակը\" })\n  }),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertRsvp = z.infer<typeof insertRsvpSchema>;\nexport type Rsvp = typeof rsvps.$inferSelect;\n","size_bytes":1917},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { MaintenanceMode } from \"@/components/maintenance-mode\";\nimport { AdminPanel } from \"@/components/admin-panel\";\nimport { weddingConfig } from \"@/config/wedding-config\";\nimport Home from \"@/pages/home\";\nimport PhotosPage from \"@/pages/photos\";\nimport NotFound from \"@/pages/not-found\";\nimport LoadingScreen from \"@/components/loading-screen\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/photos\" component={PhotosPage} />\n      <Route path=\"/admin\" component={AdminPanel} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [location] = useLocation();\n  const [maintenanceBypassed, setMaintenanceBypassed] = useState(false);\n  const [maintenanceEnabled, setMaintenanceEnabled] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check maintenance status from server and bypass conditions\n  useEffect(() => {\n    const checkMaintenanceStatus = async (retryCount = 0) => {\n      try {\n        const response = await fetch(\"/api/maintenance\");\n        if (!response.ok) throw new Error(`HTTP ${response.status}`);\n        \n        const data = await response.json();\n        setMaintenanceEnabled(data.enabled);\n        console.log(\"🔧 Maintenance status loaded:\", data.enabled);\n\n        // Check bypass conditions\n        const bypassKey = localStorage.getItem(\"maintenance-bypass\");\n        const urlParams = new URLSearchParams(window.location.search);\n        const previewParam = urlParams.get(\"preview\");\n        \n        // Allow bypass with URL parameter or localStorage\n        if (bypassKey === \"true\" || previewParam === \"true\") {\n          setMaintenanceBypassed(true);\n        }\n      } catch (error) {\n        console.error(\"Failed to check maintenance status:\", error);\n        \n        // Retry once after 2 seconds if first attempt fails\n        if (retryCount === 0) {\n          console.log(\"🔄 Retrying maintenance status check...\");\n          setTimeout(() => checkMaintenanceStatus(1), 2000);\n          return;\n        }\n        \n        // Don't change maintenance state on API failure to prevent automatic turn-off\n        console.warn(\"⚠️ Keeping current maintenance state due to API failure\");\n      } finally {\n        if (retryCount > 0) setLoading(false);\n      }\n    };\n\n    checkMaintenanceStatus();\n    setTimeout(() => setLoading(false), 5000); // Failsafe timeout\n  }, []);\n\n  const handlePasswordCorrect = () => {\n    setMaintenanceBypassed(true);\n    localStorage.setItem(\"maintenance-bypass\", \"true\");\n  };\n\n  // Show maintenance mode if enabled and not bypassed, but allow admin panel access\n  const isAdminRoute = location === \"/admin\";\n  const shouldShowMaintenance = maintenanceEnabled && !maintenanceBypassed && !isAdminRoute;\n\n  // Show loading state while checking maintenance status\n  if (loading) {\n    return <LoadingScreen />;\n  }\n\n  if (shouldShowMaintenance) {\n    return (\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Toaster />\n          <MaintenanceMode onPasswordCorrect={handlePasswordCorrect} />\n        </TooltipProvider>\n      </QueryClientProvider>\n    );\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3710},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&family=Inter:wght@300;400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(340, 30%, 97%);\n  --foreground: hsl(340, 15%, 15%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(340, 15%, 15%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(340, 15%, 15%);\n  --primary: hsl(340, 45%, 65%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(340, 20%, 90%);\n  --secondary-foreground: hsl(340, 15%, 15%);\n  --muted: hsl(340, 15%, 92%);\n  --muted-foreground: hsl(340, 10%, 50%);\n  --accent: hsl(340, 25%, 88%);\n  --accent-foreground: hsl(340, 15%, 15%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(340, 15%, 85%);\n  --input: hsl(340, 20%, 96%);\n  --ring: hsl(340, 45%, 65%);\n  \n  /* Custom wedding colors - Blush Pink Palette */\n  --cream: hsl(340, 30%, 97%);\n  --soft-gold: hsl(340, 45%, 65%);\n  --sage-green: hsl(340, 20%, 80%);\n  --warm-beige: hsl(340, 25%, 88%);\n  --charcoal: hsl(340, 15%, 15%);\n  --light-gold: hsl(340, 30%, 85%);\n  \n  --font-serif: 'Playfair Display', serif;\n  --font-sans: 'Inter', sans-serif;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 5%);\n  --foreground: hsl(0, 0%, 90%);\n  --card: hsl(0, 0%, 8%);\n  --card-foreground: hsl(0, 0%, 90%);\n  --popover: hsl(0, 0%, 8%);\n  --popover-foreground: hsl(0, 0%, 90%);\n  --primary: hsl(45, 80%, 50%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(0, 0%, 15%);\n  --secondary-foreground: hsl(0, 0%, 90%);\n  --muted: hsl(0, 0%, 12%);\n  --muted-foreground: hsl(0, 0%, 60%);\n  --accent: hsl(0, 0%, 12%);\n  --accent-foreground: hsl(0, 0%, 90%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 15%);\n  --input: hsl(0, 0%, 12%);\n  --ring: hsl(45, 80%, 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    background-color: var(--cream);\n    color: var(--charcoal);\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer components {\n  .ornament {\n    background-image: url(\"data:image/svg+xml,%3Csvg width='40' height='20' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M20 10 L10 5 L15 10 L10 15 L20 10 L30 15 L25 10 L30 5 Z' fill='%23E4A5B8' opacity='0.7'/%3E%3C/svg%3E\");\n    background-repeat: no-repeat;\n    background-position: center;\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 1s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.8s ease-out;\n  }\n  \n  .animate-slide-in-left {\n    animation: slideInLeft 0.8s ease-out;\n  }\n  \n  .animate-slide-in-right {\n    animation: slideInRight 0.8s ease-out;\n  }\n  \n  .animate-fade-in-scale {\n    animation: fadeInScale 0.8s ease-out;\n  }\n  \n  .animate-bounce-gentle {\n    animation: bounceGentle 2s infinite;\n  }\n  \n  .animate-heartbeat {\n    animation: heartbeat 1.5s ease-in-out infinite;\n  }\n  \n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n  \n  /* Animation states */\n  .opacity-0 {\n    opacity: 0;\n  }\n  \n  .animate-on-scroll {\n    opacity: 0;\n    transform: translateY(30px);\n    transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  }\n  \n  .animate-on-scroll.animate-slide-up {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  \n  .animate-on-scroll.animate-slide-in-left {\n    opacity: 1;\n    transform: translateX(0);\n  }\n  \n  .animate-on-scroll.animate-slide-in-right {\n    opacity: 1;\n    transform: translateX(0);\n  }\n  \n  .animate-on-scroll.animate-fade-in-scale {\n    opacity: 1;\n    transform: scale(1);\n  }\n  \n  .animate-on-scroll.animate-slide-in-left {\n    transform: translateX(-50px);\n  }\n  \n  .animate-on-scroll.animate-slide-in-right {\n    transform: translateX(50px);\n  }\n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n    transform: translateY(20px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n@keyframes slideUp {\n  from { \n    opacity: 0; \n    transform: translateY(30px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n@keyframes bounceGentle {\n  0%, 20%, 50%, 80%, 100% { \n    transform: translateY(0); \n  }\n  40% { \n    transform: translateY(-10px); \n  }\n  60% { \n    transform: translateY(-5px); \n  }\n}\n\n@keyframes heartbeat {\n  0%, 100% { \n    transform: scale(1); \n  }\n  25% { \n    transform: scale(1.15); \n  }\n  50% { \n    transform: scale(1.05); \n  }\n  75% { \n    transform: scale(1.2); \n  }\n}\n\n@keyframes slideInLeft {\n  from { \n    opacity: 0; \n    transform: translateX(-50px); \n  }\n  to { \n    opacity: 1; \n    transform: translateX(0); \n  }\n}\n\n@keyframes slideInRight {\n  from { \n    opacity: 0; \n    transform: translateX(50px); \n  }\n  to { \n    opacity: 1; \n    transform: translateX(0); \n  }\n}\n\n@keyframes fadeInScale {\n  from { \n    opacity: 0; \n    transform: scale(0.9); \n  }\n  to { \n    opacity: 1; \n    transform: scale(1); \n  }\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px); \n  }\n  50% { \n    transform: translateY(-10px); \n  }\n}\n\n/* Responsive Hero Background Positioning */\n.hero-bg-responsive {\n  background-position: center 20% !important;\n}\n\n@media (max-width: 768px) {\n  .hero-bg-responsive {\n    background-position: 55% center !important;\n    background-size: cover !important;\n  }\n}\n","size_bytes":5389},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/calendar-section.tsx":{"content":"import { weddingConfig } from \"@/config/wedding-config\";\nimport { useScrollAnimation } from \"@/hooks/use-scroll-animation\";\n\nexport default function CalendarSection() {\n  const calendarDays = [\n    [\"\", \"\", \"\", \"1\", \"2\", \"3\", \"4\"],\n    [\"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"],\n    [\"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"],\n    [\"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"],\n    [\"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"\"],\n  ];\n\n  const titleRef = useScrollAnimation(\"animate-slide-up\");\n  const calendarRef = useScrollAnimation(\"animate-slide-in-left\");\n  const dateRef = useScrollAnimation(\"animate-slide-in-right\");\n\n  return (\n    <section\n      id=\"calendar\"\n      className=\"py-20 bg-gradient-to-br from-cream via-white to-warmBeige/20\"\n    >\n      <div className=\"max-w-5xl mx-auto px-4\">\n        {/* Section Header */}\n        <div ref={titleRef} className=\"text-center mb-16 animate-on-scroll\">\n          <h2\n            className=\"text-5xl md:text-6xl text-charcoal mb-8\"\n            style={{\n              fontFamily: \"Playfair Display, serif\",\n              fontWeight: \"300\",\n            }}\n            data-testid=\"text-calendar-title\"\n          >\n            {weddingConfig.calendar.title}\n          </h2>\n          <div className=\"w-24 h-0.5 bg-softGold mx-auto mb-8\"></div>\n          <p className=\"text-charcoal/70 max-w-3xl mx-auto text-lg leading-relaxed\">\n            {weddingConfig.calendar.description\n              .split(\"\\n\")\n              .map((line, index) => (\n                <span key={index}>\n                  {line}\n                  {index <\n                    weddingConfig.calendar.description.split(\"\\n\").length -\n                      1 && <br />}\n                </span>\n              ))}\n          </p>\n        </div>\n\n        {/* Calendar and Date Display */}\n        <div className=\"flex justify-center max-w-6xl mx-auto\">\n          {/* Calendar */}\n          <div\n            ref={calendarRef}\n            className=\"w-full max-w-lg animate-on-scroll\"\n          >\n            <div className=\"bg-white rounded-3xl shadow-2xl p-10 border border-charcoal/5 w-full\">\n              {/* Month Header */}\n              <div className=\"text-center mb-8\">\n                <h3\n                  className=\"text-3xl font-serif text-charcoal mb-3\"\n                  style={{ fontFamily: \"Playfair Display, serif\" }}\n                >\n                  {weddingConfig.calendar.monthTitle}\n                </h3>\n                <div className=\"w-16 h-0.5 bg-softGold mx-auto\"></div>\n              </div>\n\n              {/* Day Labels */}\n              <div className=\"grid grid-cols-7 gap-2 mb-6\">\n                {weddingConfig.calendar.dayLabels.map((day, index) => (\n                  <div\n                    key={index}\n                    className=\"text-center text-charcoal/60 text-sm font-semibold py-3\"\n                  >\n                    {day}\n                  </div>\n                ))}\n              </div>\n\n              {/* Calendar Grid */}\n              <div\n                className=\"grid grid-cols-7 gap-2\"\n                data-testid=\"calendar-grid\"\n              >\n                {calendarDays.map((week, weekIndex) =>\n                  week.map((day, dayIndex) => (\n                    <div\n                      key={`${weekIndex}-${dayIndex}`}\n                      className={`\n                        relative py-4 text-center text-base rounded-xl transition-all duration-300\n                        ${\n                          day === weddingConfig.wedding.day\n                            ? \"z-10\"\n                            : day\n                              ? \"text-charcoal/70 hover:bg-softGold/10 hover:scale-105\"\n                              : \"\"\n                        }\n                      `}\n                      data-testid={\n                        day === weddingConfig.wedding.day\n                          ? \"calendar-wedding-day\"\n                          : `calendar-day-${day}`\n                      }\n                    >\n                      {day === weddingConfig.wedding.day ? (\n                        <div className=\"inline-flex items-center justify-center h-full\">\n                          <div className=\"relative\">\n                            <svg\n                              viewBox=\"0 0 32 29.6\"\n                              className=\"w-8 h-8 fill-current animate-heartbeat\"\n                              style={{\n                                marginTop: \"-5px\",\n                                color: \"#E4A5B8\", // sets the heart color to match website pink theme\n                                filter:\n                                  \"drop-shadow(0 2px 4px rgba(0, 0, 0, 0.25))\", // softer shadow for contrast\n                              }}\n                            >\n                              <path\n                                d=\"M23.6,0c-2.9,0-5.6,1.4-7.6,3.6C14,1.4,11.3,0,8.4,0\n                                 C3.8,0,0,3.8,0,8.4c0,9.2,16,21.2,16,21.2s16-12,16-21.2\n                                 C32,3.8,28.2,0,23.6,0z\"\n                              />\n                            </svg>\n\n                            <span\n                              className=\"absolute inset-0 flex items-center justify-center text-gray font-bold text-xs\"\n                              style={{ marginTop: \"-5px\" }}\n                            >\n                              {day}\n                            </span>\n                          </div>\n                        </div>\n                      ) : day ? (\n                        <span className=\"text-charcoal/70\">{day}</span>\n                      ) : null}\n                    </div>\n                  )),\n                )}\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5810},"client/src/components/countdown-timer.tsx":{"content":"import { useCountdown } from \"@/hooks/use-countdown\";\nimport { weddingConfig } from \"@/config/wedding-config\";\nimport { useScrollAnimation, useStaggeredAnimation } from \"@/hooks/use-scroll-animation\";\n\nexport default function CountdownTimer() {\n  // Wedding date from configuration\n  const weddingDate = new Date(weddingConfig.wedding.date);\n  const { days, hours, minutes, seconds } = useCountdown(weddingDate);\n  const titleRef = useScrollAnimation('animate-fade-in-scale');\n  const countdownRef = useStaggeredAnimation(150);\n\n  return (\n    <section id=\"countdown\" className=\"relative py-20 overflow-hidden\">\n      {/* Romantic Background Image */}\n      <div\n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{\n          backgroundImage: \"url('@assets/image_1755881009663.png')\",\n        }}\n      >\n        {/* Dark overlay for better text readability */}\n        <div className=\"absolute inset-0 bg-black/40\"></div>\n      </div>\n\n      <div className=\"relative z-10 max-w-4xl mx-auto px-4 text-center\">\n        {/* Wedding Date Display */}\n        <div ref={titleRef} className=\"mb-8 animate-on-scroll\">\n          <h2\n            className=\"text-2xl md:text-3xl font-bold text-white mb-2\"\n            data-testid=\"text-wedding-date\"\n          >\n            {weddingConfig.wedding.displayDate}\n          </h2>\n          <p\n            className=\"text-white/80 text-sm md:text-base\"\n            data-testid=\"text-wedding-subtitle\"\n          >\n            {weddingConfig.countdown.subtitle}\n          </p>\n        </div>\n\n        {/* Countdown Numbers */}\n        <div\n          ref={countdownRef}\n          className=\"flex justify-center items-center space-x-4 md:space-x-8\"\n          data-testid=\"countdown-overlay\"\n        >\n          <div className=\"text-center animate-on-scroll\">\n            <div\n              className=\"text-4xl md:text-6xl font-bold text-white mb-1\"\n              data-testid=\"countdown-days\"\n            >\n              {days.toString().padStart(2, \"0\")}\n            </div>\n            <div className=\"text-white/90 text-sm md:text-base\">\n              {weddingConfig.countdown.labels.days}\n            </div>\n          </div>\n\n          <div className=\"text-center animate-on-scroll\">\n            <div\n              className=\"text-4xl md:text-6xl font-bold text-white mb-1\"\n              data-testid=\"countdown-hours\"\n            >\n              {hours.toString().padStart(2, \"0\")}\n            </div>\n            <div className=\"text-white/90 text-sm md:text-base\">\n              {weddingConfig.countdown.labels.hours}\n            </div>\n          </div>\n\n          <div className=\"text-center animate-on-scroll\">\n            <div\n              className=\"text-4xl md:text-6xl font-bold text-white mb-1\"\n              data-testid=\"countdown-minutes\"\n            >\n              {minutes.toString().padStart(2, \"0\")}\n            </div>\n            <div className=\"text-white/90 text-sm md:text-base\">\n              {weddingConfig.countdown.labels.minutes}\n            </div>\n          </div>\n\n          <div className=\"text-center animate-on-scroll\">\n            <div\n              className=\"text-4xl md:text-6xl font-bold text-white mb-1\"\n              data-testid=\"countdown-seconds\"\n            >\n              {seconds.toString().padStart(2, \"0\")}\n            </div>\n            <div className=\"text-white/90 text-sm md:text-base\">\n              {weddingConfig.countdown.labels.seconds}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3542},"client/src/components/hero-section.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Play, Pause } from \"lucide-react\";\nimport { weddingConfig } from \"@/config/wedding-config\";\nimport couplePhoto from \"@assets/couple11.jpg\";\nimport detailPhoto from \"@assets/Blog_Banner_Left_Hand_Story_1755890185205.webp\";\nimport heartImage from \"@assets/heart-tattoo.jfif\";\nimport weddingMusic from \"@assets/Indila - Love Story_1756335711694.mp3\";\n\nexport default function HeroSection() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audioLoaded, setAudioLoaded] = useState(false);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  useEffect(() => {\n    // Create audio element\n    audioRef.current = new Audio();\n    // Using Indila - Love Story for background music\n    audioRef.current.src = weddingMusic;\n\n    audioRef.current.loop = true;\n    audioRef.current.volume = 0.3; // Set volume to 30%\n\n    audioRef.current.addEventListener(\"canplaythrough\", () => {\n      setAudioLoaded(true);\n    });\n\n    audioRef.current.addEventListener(\"error\", () => {\n      console.log(\"Audio file not found or failed to load\");\n      setAudioLoaded(false);\n    });\n\n    return () => {\n      if (audioRef.current) {\n        audioRef.current.pause();\n        audioRef.current = null;\n      }\n    };\n  }, []);\n\n  const toggleMusic = async () => {\n    if (!audioRef.current) return;\n\n    try {\n      if (isPlaying) {\n        audioRef.current.pause();\n        setIsPlaying(false);\n      } else {\n        await audioRef.current.play();\n        setIsPlaying(true);\n      }\n    } catch (error) {\n      console.log(\"Audio playback failed:\", error);\n      alert(\n        \"Չհաջողվեց միացնել երաժշտությունը: Խնդրում ենք ստուգել, որ մուսիկական ֆայլը գոյություն ունի:\",\n      );\n    }\n  };\n\n  return (\n    <section\n      id=\"hero\"\n      className=\"min-h-[75vh] h-[75vh] md:min-h-screen md:h-screen lg:h-[120vh] flex items-center justify-center relative overflow-hidden pt-20\"\n    >\n      {/* Background decorative elements */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-lightGold/20 to-sageGreen/10\"></div>\n      <div className=\"absolute top-20 left-10 w-32 h-32 bg-softGold/10 rounded-full blur-xl\"></div>\n      <div className=\"absolute bottom-20 right-10 w-40 h-40 bg-sageGreen/10 rounded-full blur-xl\"></div>\n\n      {/* Hero Image - Responsive Background */}\n      <div \n        className=\"absolute inset-0 w-full h-full bg-cover bg-no-repeat hero-bg-responsive\"\n        style={{\n          backgroundImage: `url(${couplePhoto})`\n        }}\n        data-testid=\"bg-main-couple\"\n      >\n        {/* Overlay for better text readability */}\n        <div className=\"absolute inset-0 bg-black/30\"></div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto px-4 text-center relative z-10 animate-fade-in mt-16\">\n        <div className=\"ornament w-full h-8 mb-8\"></div>\n\n        <h1\n          className=\"text-4xl md:text-6xl font-serif font-bold text-white mb-4 flex items-center justify-center flex-wrap gap-3 drop-shadow-lg\"\n          data-testid=\"text-couple-names\"\n        >\n          <span>{weddingConfig.couple.groomName}</span>\n          <span className=\"text-softGold mx-1\">∞</span>\n          <span>{weddingConfig.couple.brideName}</span>\n        </h1>\n        <p\n          className=\"text-xl md:text-2xl text-white/90 mb-8 font-light drop-shadow-lg\"\n          data-testid=\"text-invitation\"\n        >\n          Հրավիրում ենք մեր հարսանիքին\n        </p>\n        <p\n          className=\"text-lg md:text-xl text-white/80 max-w-2xl mx-auto leading-relaxed drop-shadow-lg\"\n          data-testid=\"text-welcome-message\"\n        >\n          {weddingConfig.hero.welcomeMessage}\n        </p>\n\n        {/* Music Player */}\n        <div className=\"mt-8 flex justify-center\">\n          <button\n            onClick={toggleMusic}\n            className=\"bg-softGold hover:bg-softGold/90 text-white px-6 py-3 rounded-full shadow-lg transition-all duration-300 flex items-center space-x-2\"\n            data-testid=\"button-music-toggle\"\n          >\n            {isPlaying ? (\n              <Pause className=\"w-5 h-5\" />\n            ) : (\n              <Play className=\"w-5 h-5\" />\n            )}\n            <span>{weddingConfig.hero.musicButton}</span>\n          </button>\n        </div>\n\n        <div className=\"ornament w-full h-8 mt-8\"></div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4458},"client/src/components/locations-section.tsx":{"content":"import { Church, Utensils, MapPin } from \"lucide-react\";\nimport { weddingConfig } from \"@/config/wedding-config\";\nimport churchPhoto from \"@assets/3_1755890746399.jpg\";\nimport restaurantPhoto from \"@assets/11_1755890922505.jpg\";\nimport { useScrollAnimation } from \"@/hooks/use-scroll-animation\";\n\nexport default function LocationsSection() {\n  const openMap = (location: 'church' | 'restaurant') => {\n    const event = new CustomEvent('openMap', { detail: { location } });\n    window.dispatchEvent(event);\n  };\n  \n  const titleRef = useScrollAnimation('animate-slide-up');\n  const churchRef = useScrollAnimation('animate-slide-in-left');\n  const restaurantRef = useScrollAnimation('animate-slide-in-right');\n\n  return (\n    <section id=\"locations\" className=\"py-20 bg-gradient-to-r from-sageGreen/10 to-warmBeige/20\">\n      <div className=\"max-w-6xl mx-auto px-4\">\n        <div ref={titleRef} className=\"text-center mb-16 animate-on-scroll\">\n          <h2 className=\"text-5xl md:text-6xl text-charcoal mb-8\" \n              style={{ \n                fontFamily: 'Playfair Display, serif', \n                fontWeight: '300'\n              }}\n              data-testid=\"text-locations-title\">\n            {weddingConfig.locations.sectionTitle}\n          </h2>\n          <div className=\"w-24 h-0.5 bg-softGold mx-auto\"></div>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 gap-8\">\n          {/* Church Location */}\n          <div ref={churchRef} className=\"bg-white rounded-xl shadow-xl overflow-hidden transform hover:scale-105 transition-transform duration-300 animate-on-scroll\" data-testid=\"card-church\">\n            <img \n              src={churchPhoto} \n              alt=\"Եկեղեցի\" \n              className=\"w-full h-48 object-cover\" \n              data-testid=\"img-church\"\n            />\n            <div className=\"p-6\">\n              <div className=\"flex items-center mb-4\">\n                <Church className=\"text-softGold text-2xl mr-3\" />\n                <h3 className=\"text-xl font-serif font-bold text-charcoal\" data-testid=\"text-church-title\">\n                  {weddingConfig.locations.church.title}\n                </h3>\n              </div>\n              <p className=\"text-charcoal/70 mb-4\" data-testid=\"text-church-name\">\n                {weddingConfig.locations.church.name}\n              </p>\n              <p className=\"text-charcoal/60 text-sm mb-4\" data-testid=\"text-church-description\">\n                {weddingConfig.locations.church.description}\n              </p>\n              <button \n                onClick={() => openMap('church')}\n                className=\"bg-softGold hover:bg-softGold/90 text-white px-4 py-2 rounded-lg transition-colors duration-300 flex items-center\"\n                data-testid=\"button-church-map\"\n              >\n                <MapPin className=\"w-4 h-4 mr-2\" />\n                {weddingConfig.locations.church.mapButton}\n              </button>\n            </div>\n          </div>\n          \n          {/* Restaurant Location */}\n          <div ref={restaurantRef} className=\"bg-white rounded-xl shadow-xl overflow-hidden transform hover:scale-105 transition-transform duration-300 animate-on-scroll\" data-testid=\"card-restaurant\">\n            <img \n              src={restaurantPhoto} \n              alt=\"Ռեստորան\" \n              className=\"w-full h-48 object-cover\" \n              data-testid=\"img-restaurant\"\n            />\n            <div className=\"p-6\">\n              <div className=\"flex items-center mb-4\">\n                <Utensils className=\"text-softGold text-2xl mr-3\" />\n                <h3 className=\"text-xl font-serif font-bold text-charcoal\" data-testid=\"text-restaurant-title\">\n                  {weddingConfig.locations.restaurant.title}\n                </h3>\n              </div>\n              <p className=\"text-charcoal/70 mb-4\" data-testid=\"text-restaurant-name\">\n                {weddingConfig.locations.restaurant.name}\n              </p>\n              <p className=\"text-charcoal/60 text-sm mb-4\" data-testid=\"text-restaurant-description\">\n                {weddingConfig.locations.restaurant.description}\n              </p>\n              <button \n                onClick={() => openMap('restaurant')}\n                className=\"bg-softGold hover:bg-softGold/90 text-white px-4 py-2 rounded-lg transition-colors duration-300 flex items-center\"\n                data-testid=\"button-restaurant-map\"\n              >\n                <MapPin className=\"w-4 h-4 mr-2\" />\n                {weddingConfig.locations.restaurant.mapButton}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4657},"client/src/components/map-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { X, ExternalLink } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\nexport default function MapModal() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [location, setLocation] = useState<'church' | 'restaurant' | null>(null);\n\n  useEffect(() => {\n    const handleOpenMap = (event: CustomEvent) => {\n      setLocation(event.detail.location);\n      setIsOpen(true);\n    };\n\n    window.addEventListener('openMap', handleOpenMap as EventListener);\n    return () => window.removeEventListener('openMap', handleOpenMap as EventListener);\n  }, []);\n\n  const getLocationInfo = () => {\n    if (location === 'church') {\n      return {\n        title: 'Սուրբ Գրիգոր Լուսավորիչ Եկեղեցի',\n        mapUrl: `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3048.1!2d44.51732572776011!3d40.1723136334379!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2zNDDCsDEwJzIwLjMiTiA0NMKwMzEnMDIuNCJF!5e0!3m2!1sen!2sam!4v${Date.now()}!5m2!1sen!2sam`,\n        directUrl: `https://www.google.com/maps?q=40.1723136334379,44.51732572776011`\n      };\n    } else if (location === 'restaurant') {\n      return {\n        title: 'BAYAZET HALL',\n        mapUrl: `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3037.8!2d45.145645997030925!3d40.35985267995858!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2zNDDCsDIxJzM1LjUiTiA0NcKwMDgnNDQuMyJF!5e0!3m2!1sen!2sam!4v${Date.now()}!5m2!1sen!2sam`,\n        directUrl: `https://www.google.com/maps?q=40.35985267995858,45.145645997030925`\n      };\n    }\n    return { title: '', mapUrl: '', directUrl: '' };\n  };\n\n  const locationInfo = getLocationInfo();\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh]\" data-testid=\"map-modal\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"map-modal-title\">\n            {locationInfo.title}\n          </DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div className=\"h-96\" data-testid=\"map-container\">\n            <iframe\n              src={locationInfo.mapUrl}\n              width=\"100%\"\n              height=\"100%\"\n              style={{ border: 0 }}\n              allowFullScreen\n              loading=\"lazy\"\n              referrerPolicy=\"no-referrer-when-downgrade\"\n              className=\"rounded-lg\"\n            ></iframe>\n          </div>\n          <div className=\"flex justify-center\">\n            <a\n              href={locationInfo.directUrl}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"bg-softGold hover:bg-softGold/90 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-300 flex items-center space-x-2\"\n            >\n              <ExternalLink className=\"w-4 h-4\" />\n              <span>Բացել Google Maps-ում</span>\n            </a>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3051},"client/src/components/navigation.tsx":{"content":"import { weddingConfig } from \"@/config/wedding-config\";\n\nexport default function Navigation() {\n\n  return (\n    <nav \n      className=\"fixed top-0 w-full z-50 bg-cream/95 backdrop-blur-sm shadow-sm\"\n      data-testid=\"navigation\"\n    >\n      <div className=\"max-w-6xl mx-auto px-4 py-4\">\n        {/* Couple Names Only */}\n        <div className=\"flex justify-center\">\n          <span className=\"text-xl font-serif font-bold text-charcoal flex items-center gap-2\">\n            <span>{weddingConfig.couple.groomName}</span>\n            <span className=\"text-softGold mx-1\">∞</span>\n            <span>{weddingConfig.couple.brideName}</span>\n          </span>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":705},"client/src/components/photo-section.tsx":{"content":"import { Download, Camera, Upload } from \"lucide-react\";\nimport { weddingConfig } from \"@/config/wedding-config\";\nimport weddingPhoto from \"@assets/IMG_5671_1755890386133.jpeg\";\nimport { ObjectUploader } from \"./ObjectUploader\";\nimport { useState } from \"react\";\n\nexport default function PhotoSection() {\n  const [uploadStatus, setUploadStatus] = useState<string>(\"\");\n\n  const openPhotoGallery = () => {\n    // TODO: Open Google Drive or Yandex Disk link when available\n    alert(weddingConfig.photos.comingSoonMessage);\n  };\n\n  const handleGetUploadParameters = async () => {\n    try {\n      const response = await fetch('/api/photos/upload', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n      });\n      const data = await response.json();\n      return {\n        method: 'PUT' as const,\n        url: data.uploadURL,\n      };\n    } catch (error) {\n      console.error('Failed to get upload URL:', error);\n      throw error;\n    }\n  };\n\n  const handleUploadComplete = async (files: File[]) => {\n    try {\n      setUploadStatus(`${files.length} նկար(ներ) հաջողությամբ ավելացվեցին! Շնորհակալություն:`);\n      setTimeout(() => setUploadStatus(\"\"), 4000);\n    } catch (error) {\n      console.error('Failed to complete upload:', error);\n      setUploadStatus(\"Սխալ վերբեռնելիս: Խնդրում ենք կրկին փորձել:\");\n      setTimeout(() => setUploadStatus(\"\"), 3000);\n    }\n  };\n\n  return (\n    <section className=\"py-12 sm:py-20\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n        <h2 className=\"text-3xl sm:text-4xl md:text-5xl lg:text-6xl text-charcoal mb-6 sm:mb-8 leading-tight\" \n            style={{ \n              fontFamily: 'Playfair Display, serif', \n              fontWeight: '300'\n            }}\n            data-testid=\"text-photo-title\">\n          {weddingConfig.photos.title}\n        </h2>\n        <div className=\"w-16 sm:w-24 h-0.5 bg-softGold mx-auto mb-8 sm:mb-12\"></div>\n        \n        <div className=\"bg-white/90 backdrop-blur-sm rounded-2xl shadow-2xl p-4 sm:p-6 lg:p-8 border border-softGold/20\" data-testid=\"photo-gallery-container\">\n          <div className=\"relative group overflow-hidden rounded-xl\">\n            <img \n              src={weddingPhoto} \n              alt=\"Հարսանեկան նկարներ\" \n              className=\"w-full h-64 sm:h-80 object-cover transition-transform duration-500 group-hover:scale-105\" \n              data-testid=\"img-wedding-collage\"\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-t from-softGold/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n          </div>\n          \n          <p className=\"text-charcoal/70 mb-6 mt-4 px-2 text-sm sm:text-base\" data-testid=\"text-photo-description\">\n            {weddingConfig.photos.description}\n          </p>\n          \n          {/* Upload Status Message */}\n          {uploadStatus && (\n            <div className=\"mb-6 p-4 bg-softGold/20 rounded-lg border border-softGold/30\">\n              <p className=\"text-charcoal font-medium\">{uploadStatus}</p>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            <ObjectUploader\n              maxNumberOfFiles={10}\n              maxFileSize={10485760} // 10MB\n              onGetUploadParameters={handleGetUploadParameters}\n              onComplete={handleUploadComplete}\n              buttonClassName=\"bg-softGold hover:bg-softGold/90 text-white px-6 sm:px-8 py-3 sm:py-4 rounded-lg font-medium transition-colors duration-300 transform hover:scale-105 flex items-center text-sm sm:text-base\"\n            >\n              <Camera className=\"w-4 h-4 sm:w-5 sm:h-5 mr-2\" />\n              Ավելացնել նկարներ\n            </ObjectUploader>\n            \n            <button \n              onClick={openPhotoGallery}\n              className=\"bg-sageGreen hover:bg-sageGreen/90 text-white px-6 sm:px-8 py-3 sm:py-4 rounded-lg font-medium transition-colors duration-300 transform hover:scale-105 flex items-center text-sm sm:text-base\"\n              data-testid=\"button-download-photos\"\n            >\n              <Download className=\"w-4 h-4 sm:w-5 sm:h-5 mr-2\" />\n              {weddingConfig.photos.downloadButton}\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4490},"client/src/components/rsvp-section.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { insertRsvpSchema, type InsertRsvp } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Label } from \"@/components/ui/label\";\nimport { weddingConfig } from \"@/config/wedding-config\";\nimport { useScrollAnimation } from \"@/hooks/use-scroll-animation\";\n\nexport default function RsvpSection() {\n  const { toast } = useToast();\n  const titleRef = useScrollAnimation('animate-fade-in-scale');\n  const formRef = useScrollAnimation('animate-slide-up');\n  \n  const form = useForm<InsertRsvp>({\n    resolver: zodResolver(insertRsvpSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      guestCount: \"\",\n      guestNames: \"\",\n      attendance: \"attending\"\n    }\n  });\n\n  const rsvpMutation = useMutation({\n    mutationFn: async (data: InsertRsvp) => {\n      const response = await apiRequest(\"POST\", \"/api/rsvp\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Շնորհակալություն!\",\n        description: data.message,\n      });\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Սխալ\",\n        description: error.message || \"Տեղի է ունեցել սխալ\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const onSubmit = (data: InsertRsvp) => {\n    rsvpMutation.mutate(data);\n  };\n\n  return (\n    <section id=\"rsvp\" className=\"py-12 sm:py-20 bg-gradient-to-r from-lightGold/20 to-warmBeige/30\">\n      <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div ref={titleRef} className=\"text-center mb-12 sm:mb-16 animate-on-scroll\">\n          <h2 className=\"text-3xl sm:text-4xl md:text-5xl lg:text-6xl text-charcoal mb-6 sm:mb-8 leading-tight\" \n              style={{ \n                fontFamily: 'Playfair Display, serif', \n                fontWeight: '300'\n              }}\n              data-testid=\"text-rsvp-title\">\n            {weddingConfig.rsvp.title}\n          </h2>\n          <div className=\"w-16 sm:w-24 h-0.5 bg-softGold mx-auto mb-6 sm:mb-8\"></div>\n          <p className=\"text-charcoal/70 text-base sm:text-lg px-4\" data-testid=\"text-rsvp-description\">\n            {weddingConfig.rsvp.description}\n          </p>\n        </div>\n        \n        <div ref={formRef} className=\"bg-white rounded-xl shadow-xl p-4 sm:p-6 lg:p-8 animate-on-scroll\" data-testid=\"rsvp-form-container\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 sm:space-y-6\" data-testid=\"rsvp-form\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{weddingConfig.rsvp.form.firstName}</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder={weddingConfig.rsvp.form.firstNamePlaceholder} \n                          {...field} \n                          data-testid=\"input-first-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{weddingConfig.rsvp.form.lastName}</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder={weddingConfig.rsvp.form.lastNamePlaceholder} \n                          {...field} \n                          data-testid=\"input-last-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{weddingConfig.rsvp.form.email}</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"email\"\n                        placeholder={weddingConfig.rsvp.form.emailPlaceholder} \n                        {...field} \n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"guestCount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{weddingConfig.rsvp.form.guestCount}</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-guest-count\">\n                          <SelectValue placeholder={weddingConfig.rsvp.form.guestCountPlaceholder} />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {weddingConfig.rsvp.guestOptions.map((option) => (\n                          <SelectItem key={option.value} value={option.value}>\n                            {option.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"guestNames\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{weddingConfig.rsvp.form.guestNames}</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder={weddingConfig.rsvp.form.guestNamesPlaceholder}\n                        rows={3}\n                        {...field} \n                        data-testid=\"textarea-guest-names\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"attendance\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{weddingConfig.rsvp.form.attendance}</FormLabel>\n                    <FormControl>\n                      <RadioGroup\n                        onValueChange={field.onChange}\n                        value={field.value}\n                        className=\"space-y-3\"\n                        data-testid=\"radio-attendance\"\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          <RadioGroupItem value=\"attending\" id=\"attending\" />\n                          <Label htmlFor=\"attending\">{weddingConfig.rsvp.form.attendingYes}</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <RadioGroupItem value=\"not-attending\" id=\"not-attending\" />\n                          <Label htmlFor=\"not-attending\">{weddingConfig.rsvp.form.attendingNo}</Label>\n                        </div>\n                      </RadioGroup>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full bg-softGold hover:bg-softGold/90 text-white py-3 sm:py-4 font-medium transition-colors duration-300 transform hover:scale-105 text-sm sm:text-base\"\n                disabled={rsvpMutation.isPending}\n                data-testid=\"button-submit-rsvp\"\n              >\n                {rsvpMutation.isPending ? weddingConfig.rsvp.form.submittingButton : weddingConfig.rsvp.form.submitButton}\n              </Button>\n            </form>\n          </Form>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9035},"client/src/components/timeline-section.tsx":{"content":"import { Clock, MapPin, Users, Music } from \"lucide-react\";\nimport { weddingConfig } from \"@/config/wedding-config\";\nimport {\n  useScrollAnimation,\n  useStaggeredAnimation,\n} from \"@/hooks/use-scroll-animation\";\n\nexport default function TimelineSection() {\n  const eventIcons = [\n    <MapPin className=\"w-8 h-8\" />,\n    <Users className=\"w-8 h-8\" />,\n    <Music className=\"w-8 h-8\" />,\n    <Clock className=\"w-8 h-8\" />,\n  ];\n\n  const titleRef = useScrollAnimation(\"animate-slide-up\");\n  const cardsRef = useStaggeredAnimation(200);\n\n  return (\n    <section\n      id=\"timeline\"\n      className=\"py-24 bg-gradient-to-br from-softGold/10 via-lightGold/15 to-warmBeige/20 relative overflow-hidden\"\n    >\n      <div className=\"max-w-6xl mx-auto px-4\">\n        {/* Title */}\n        <div ref={titleRef} className=\"text-center mb-20 animate-on-scroll\">\n          <h2\n            className=\"text-5xl md:text-6xl text-charcoal mb-8\"\n            style={{\n              fontFamily: \"Playfair Display, serif\",\n              fontWeight: \"300\",\n            }}\n            data-testid=\"text-timeline-title\"\n          >\n            {weddingConfig.timeline.title}\n          </h2>\n          <div className=\"w-24 h-0.5 bg-softGold mx-auto mb-8\"></div>\n        </div>\n\n        {/* Timeline Cards */}\n        <div\n          ref={cardsRef}\n          className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\"\n        >\n          {weddingConfig.timeline.events.map((event, index) => (\n            <div\n              key={index}\n              className=\"group relative animate-on-scroll\"\n              data-testid={`timeline-event-${index}`}\n            >\n              {/* Card */}\n              <div className=\"bg-white/90 backdrop-blur-sm rounded-2xl p-8 shadow-xl border border-softGold/20 hover:shadow-2xl hover:scale-105 transition-all duration-500 relative overflow-hidden\">\n                {/* Background Pattern */}\n                <div className=\"absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-softGold/10 to-lightGold/20 rounded-bl-full\"></div>\n\n                {/* Icon */}\n                <div className=\"flex justify-center mb-6\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-softGold to-lightGold rounded-full flex items-center justify-center text-white shadow-lg group-hover:scale-110 transition-transform duration-300\">\n                    {eventIcons[index]}\n                  </div>\n                </div>\n\n                {/* Content */}\n                <div className=\"text-center space-y-4\">\n                  <div\n                    className=\"text-3xl md:text-4xl font-light text-charcoal\"\n                    style={{ fontFamily: \"Playfair Display, serif\" }}\n                    data-testid={`timeline-time-${index}`}\n                  >\n                    {event.time}\n                  </div>\n\n                  <div\n                    className=\"text-xl font-semibold text-charcoal\"\n                    data-testid={`timeline-title-${index}`}\n                  >\n                    {event.title}\n                  </div>\n\n                  {event.description && (\n                    <div\n                      className=\"text-charcoal/70 text-sm leading-relaxed\"\n                      data-testid={`timeline-description-${index}`}\n                    >\n                      {event.description}\n                    </div>\n                  )}\n                </div>\n\n                {/* Step Number */}\n              </div>\n\n              {/* Connector Line (except last item) */}\n              {index < weddingConfig.timeline.events.length - 1 && (\n                <div className=\"hidden lg:block absolute top-1/2 -right-4 w-8 h-0.5 bg-gradient-to-r from-softGold/50 to-lightGold/30 z-10\"></div>\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Thank You Message After Timeline */}\n        {weddingConfig.timeline.afterMessage && (\n          <div className=\"mt-20 text-center\">\n            <div\n              className=\"text-2xl md:text-3xl text-charcoal mb-8\"\n              style={{\n                fontFamily: \"Playfair Display, serif\",\n                fontWeight: \"300\",\n              }}\n              data-testid=\"timeline-thank-you\"\n            >\n              {weddingConfig.timeline.afterMessage.thankYou}\n            </div>\n\n            <div className=\"w-24 h-0.5 bg-softGold mx-auto mb-8\"></div>\n\n            <div\n              className=\"text-charcoal/80 text-lg max-w-3xl mx-auto leading-relaxed bg-white/60 backdrop-blur-sm rounded-2xl p-8 shadow-lg border border-softGold/20\"\n              style={{ whiteSpace: \"pre-line\" }}\n              data-testid=\"timeline-notes\"\n            >\n              {weddingConfig.timeline.afterMessage.notes}\n            </div>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":4800},"client/src/config/wedding-config.ts":{"content":"// Wedding Website Configuration\n// Edit this file to customize all text content on your website\n\nexport const weddingConfig = {\n  // Couple Information\n  couple: {\n    groomName: \"Հարութ\",\n    brideName: \"Տաթև\",\n    combinedNames: \"Հարութ & Տաթև\",\n  },\n\n  // Wedding Date & Time\n  wedding: {\n    date: \"2025-10-10T00:00:00\", // Format: YYYY-MM-DDTHH:MM:SS\n    displayDate: \"10 Հոկտեմբեր 2025\",\n    month: \"10 Հոկտեմբեր 2025\",\n    day: \"10\",\n  },\n\n  // Hero Section\n  hero: {\n    // title: \"Հարսանեկան հրավիրատոմս\",\n    welcomeMessage: \"\",\n    musicButton: \"Երաժշտություն\",\n  },\n\n  // Countdown Section\n  countdown: {\n    subtitle: \"Հարսանիքին մնացել է\",\n    labels: {\n      days: \"օր\",\n      hours: \"ժամ\",\n      minutes: \"րոպե\",\n      seconds: \"վայրկյան\",\n    },\n  },\n\n  // Calendar Section\n  calendar: {\n    title: \"Հարգելի հյուրեր\",\n    description:\n      \"Սիրով հրավիրում ենք Ձեզ ներկա գտնվելու մեր հարսանյաց արարողությանը։ Ծանոթացեք օրակարգին և հաստատեք Ձեր ներկայությունը մինչև Հոկտեմբերի 1-ը։\",\n    monthTitle: \"10 Հոկտեմբեր 2025\",\n    dayLabels: [\"ԿՐԿ\", \"ԵՐԿ\", \"ԵՐՔ\", \"ՉՈՐ\", \"ՀՆԳ\", \"ՈՒՐ\", \"ՇԲԹ\"],\n  },\n\n  // Locations\n  locations: {\n    sectionTitle: \"Location\",\n    church: {\n      title: \"Եկեղեցի\",\n      name: \"Սուրբ Գրիգոր Լուսավորիչ Եկեղեցի\",\n      description: \"Պսակադրության արարողություն\",\n      mapButton: \"Քարտեզ\",\n    },\n    restaurant: {\n      title: \"Հարսանյաց սրահ\",\n      name: \"Բայազետ Հոլլ\",\n      description: \"Ընդունելության և տոնակատարության վայր\",\n      mapButton: \"Քարտեզ\",\n    },\n  },\n\n  // Timeline Events\n  timeline: {\n    title: \"Timeline\",\n    events: [\n      {\n        time: \"14:30\",\n        title: \"Պսակադրության արարողություն\",\n      },\n      {\n        time: \"17:30\",\n        title: \"Հարսանյաց սրահ\",\n        description: \"Bayazet Hall\",\n      },\n\n      {\n        time: \"24:00\",\n        title: \"Ավարտ\",\n        description: \"\",\n      },\n    ],\n    afterMessage: {\n      thankYou: \"Շնորհակալություն մեզ հետ այս հատուկ օրը կիսելու համար\",\n      notes:\n        \"Ձեզ հետ բերեք ՍԵՐ, ժպիտներ ու անսահման դրական էմոցիաներ, ինչպես նաև հարմարավետ կոշիկներ՝ պարելու համար։\\nԹույլ տանք, որ այդ օրը սպիտակ զգեստով լինի միայն հարսնացուն 🤍\",\n    },\n  },\n\n  // RSVP Section\n  rsvp: {\n    title: \"Հարցաթերթիկ\",\n    description:\n      \"Խնդրում ենք հաստատել ձեր մասնակցությունը մինչև Հոկտեմբերի 1-ը\",\n    form: {\n      firstName: \"Անուն\",\n      firstNamePlaceholder: \"Ձեր անունը\",\n      lastName: \"Ազգանուն\",\n      lastNamePlaceholder: \"Ձեր ազգանունը\",\n      email: \"Էլ․ հասցե\",\n      emailPlaceholder: \"your@email.com\",\n      guestCount: \"Հյուրերի քանակ\",\n      guestCountPlaceholder: \"Ընտրեք հյուրերի քանակը\",\n      guestNames: \"Հյուրերի անունները և ազգանունները\",\n      guestNamesPlaceholder: \"Նշեք բոլոր հյուրերի անունները և ազգանունները\",\n      attendance: \"Մասնակցություն\",\n      attendingYes: \"Սիրով կմասնակցեմ 🤍\",\n      attendingNo: \"Ցավոք, չեմ կարող\",\n      submitButton: \"Ուղարկել հաստատումը\",\n      submittingButton: \"Ուղարկվում է...\",\n    },\n    guestOptions: [\n      { value: \"1\", label: \"1 հյուր\" },\n      { value: \"2\", label: \"2 հյուր\" },\n      { value: \"3\", label: \"3 հյուր\" },\n      { value: \"4\", label: \"4 հյուր\" },\n      { value: \"5+\", label: \"5+ հյուր\" },\n    ],\n  },\n\n  // Photo Section\n  photos: {\n    title: \"Մեր հիշարժան օրվա լուսանկարները կգտնեք այստեղ։\",\n    description:\n      \"Կիսվեք ձեր հարսանեկան նկարներով մեզ հետ: Բոլոր հարսանեկան նկարները հասանելի կլինեն արարողությունից հետո\",\n    downloadButton: \"Ներբեռնել նկարները\",\n    uploadButton: \"Ավելացնել նկարներ\",\n    comingSoonMessage: \"Նկարների հղումը կհասանելի լինի հարսանիքից հետո\",\n  },\n\n  // Navigation\n  navigation: {\n    home: \"Գլխավոր\",\n    countdown: \"Հարսանիքին մնացել է․․․\",\n    calendar: \"Օրացույց\",\n    locations: \"Վայրեր\",\n    timeline: \"Ծրագիր\",\n    rsvp: \"Հաստատում\",\n  },\n\n  // Footer\n  footer: {\n    thankYouMessage: \"\",\n  },\n\n  // Email Configuration (for admin use)\n  email: {\n    recipients: [\"harutavetisyan0@gmail.com\", \"tatevhovsepyan22@gmail.com\"],\n  },\n\n  // Maintenance Mode Configuration\n  maintenance: {\n    enabled: false, // Toggle this to enable/disable maintenance mode\n    password: \"haruttev2025\", // Password to bypass maintenance mode\n    title: \"Coming Soon\",\n    subtitle: \"\",\n    message: \"\",\n    countdownText: \"Մինչև հարսանիքը\",\n    passwordPrompt: \"\",\n    wrongPassword: \"Սխալ գաղտնի կոդ\",\n    enterPassword: \"Մուտքագրել կոդը\",\n  },\n};\n","size_bytes":5620},"client/src/hooks/use-countdown.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface CountdownTime {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\nexport function useCountdown(targetDate: Date): CountdownTime {\n  const [timeLeft, setTimeLeft] = useState<CountdownTime>({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n\n  useEffect(() => {\n    const targetTime = targetDate.getTime();\n    \n    const calculateTimeLeft = () => {\n      const now = new Date().getTime();\n      const difference = targetTime - now;\n\n      if (difference > 0) {\n        const days = Math.floor(difference / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((difference % (1000 * 60)) / 1000);\n\n        setTimeLeft({ days, hours, minutes, seconds });\n      } else {\n        setTimeLeft({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      }\n    };\n\n    calculateTimeLeft();\n    const timer = setInterval(calculateTimeLeft, 1000);\n\n    return () => clearInterval(timer);\n  }, [targetDate.getTime()]);\n\n  return timeLeft;\n}\n","size_bytes":1180},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport HeroSection from \"@/components/hero-section\";\nimport CountdownTimer from \"@/components/countdown-timer\";\nimport CalendarSection from \"@/components/calendar-section\";\nimport LocationsSection from \"@/components/locations-section\";\nimport TimelineSection from \"@/components/timeline-section\";\nimport RsvpSection from \"@/components/rsvp-section\";\nimport PhotoSection from \"@/components/photo-section\";\nimport MapModal from \"@/components/map-modal\";\nimport { weddingConfig } from \"@/config/wedding-config\";\nimport heartImage from \"@assets/heart-tattoo.jfif\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-cream text-charcoal\">\n      <Navigation />\n      <main>\n        <HeroSection />\n        <CountdownTimer />\n        <CalendarSection />\n        <LocationsSection />\n        <TimelineSection />\n        <RsvpSection />\n        <PhotoSection />\n      </main>\n      \n      {/* Footer */}\n      <footer className=\"bg-charcoal text-white py-12\">\n        <div className=\"max-w-4xl mx-auto px-4 text-center\">\n          <div className=\"ornament w-full h-8 mb-8 opacity-50\"></div>\n          <h3 className=\"text-2xl font-serif font-bold mb-4 flex items-center justify-center gap-3\">\n            <span>{weddingConfig.couple.groomName}</span>\n            <span className=\"text-softGold mx-1\">∞</span>\n            <span>{weddingConfig.couple.brideName}</span>\n          </h3>\n          <p className=\"text-white/70 mb-6\">{weddingConfig.footer.thankYouMessage}</p>\n          <p className=\"text-white/50 text-sm\">{weddingConfig.wedding.displayDate}</p>\n        </div>\n      </footer>\n\n      <MapModal />\n    </div>\n  );\n}\n","size_bytes":1698},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/use-scroll-animation.ts":{"content":"import { useEffect, useRef } from 'react';\n\nexport function useScrollAnimation(animationClass = 'animate-slide-up') {\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            entry.target.classList.add(animationClass);\n            // Add a slight delay for enhanced effect\n            setTimeout(() => {\n              entry.target.classList.add('animate-float');\n            }, 800);\n            observer.unobserve(entry.target);\n          }\n        });\n      },\n      {\n        threshold: 0.15,\n        rootMargin: '0px 0px -100px 0px'\n      }\n    );\n\n    observer.observe(element);\n\n    return () => observer.disconnect();\n  }, [animationClass]);\n\n  return elementRef;\n}\n\nexport function useStaggeredAnimation(delay = 200) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            const children = Array.from(entry.target.children) as HTMLElement[];\n            children.forEach((child, index) => {\n              setTimeout(() => {\n                child.classList.add('animate-slide-up');\n              }, index * delay);\n            });\n            observer.unobserve(entry.target);\n          }\n        });\n      },\n      {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px'\n      }\n    );\n\n    observer.observe(container);\n\n    return () => observer.disconnect();\n  }, [delay]);\n\n  return containerRef;\n}","size_bytes":1804},"server/email.ts":{"content":"import { Resend } from \"resend\";\nimport type { Rsvp } from \"@shared/schema\";\n\n// Lazy load Resend instance to reduce startup time\nlet resendInstance: Resend | null = null;\nlet resendInitialized = false;\n\nfunction getResendInstance(): Resend | null {\n  if (!resendInitialized) {\n    if (!process.env.RESEND_API_KEY) {\n      console.warn(\n        \"RESEND_API_KEY environment variable is not set. Email notifications will be disabled.\",\n      );\n      resendInstance = null;\n    } else {\n      try {\n        resendInstance = new Resend(process.env.RESEND_API_KEY);\n      } catch (error) {\n        console.error(\"Failed to initialize Resend:\", error);\n        resendInstance = null;\n      }\n    }\n    resendInitialized = true;\n  }\n  return resendInstance;\n}\n\n// Wedding couple's email addresses\nconst COUPLE_EMAILS = [\n  \"harutavetisyan0@gmail.com\",\n  \"tatevhovsepyan22@gmail.com\",\n];\n\n// Test function to verify email service is working\nexport async function testEmailService(): Promise<void> {\n  const resend = getResendInstance();\n  if (!resend) {\n    console.log(\"Email service not configured.\");\n    return;\n  }\n\n  // Test both email addresses individually\n  const testEmails = [\n    \"harutavetisyan0@gmail.com\",\n    \"tatevhovsepyan22@gmail.com\",\n  ];\n\n  for (const email of testEmails) {\n    try {\n      console.log(`🧪 Testing email to: ${email}`);\n      const testResult = await resend.emails.send({\n        from: \"Հարութ և Տաթև <onboarding@resend.dev>\",\n        to: email,\n        subject: \"Թեստ - Էլ․ փոստի ծառայության ստուգում\",\n        text: `Սա թեստային նամակ է ${email} հասցեի համար։ Եթե ստանում եք այս նամակը, ապա էլ․ փոստի ծառայությունը ճիշտ է աշխատում։`,\n        html: `<p>Սա թեստային նամակ է <strong>${email}</strong> հասցեի համար։ Եթե ստանում եք այս նամակը, ապա էլ․ փոստի ծառայությունը ճիշտ է աշխատում։</p>`,\n      });\n      console.log(`✅ Test email success for ${email}:`, testResult);\n    } catch (error) {\n      console.error(`❌ Test email failed for ${email}:`, error);\n    }\n  }\n}\n\nexport async function sendRsvpNotificationEmails(rsvp: Rsvp): Promise<boolean> {\n  const resend = getResendInstance();\n  if (!resend) {\n    console.log(\n      \"Email service not configured. Skipping RSVP notification emails.\",\n    );\n    return false;\n  }\n\n  try {\n    const attendanceText = rsvp.attendance === \"attending\" ? \"Կգա\" : \"Չի գալիս\";\n    const guestInfo = rsvp.guestNames ? `\\nՀյուրեր: ${rsvp.guestNames}` : \"\";\n\n    const emailPromises = COUPLE_EMAILS.map((email) =>\n      resend.emails.send({\n        from: \"Հարութ և Տաթև <onboarding@resend.dev>\",\n        to: email,\n        subject: `Նոր հաստատում հարսանիքի համար - ${rsvp.firstName} ${rsvp.lastName}`,\n        text: `Նոր RSVP հաստատում\\n\\nԱնուն: ${rsvp.firstName} ${rsvp.lastName}\\nԷլ․ հասցե: ${rsvp.email}\\nՀյուրերի քանակ: ${rsvp.guestCount}\\nՄասնակցություն: ${rsvp.attendance === \"attending\" ? \"Կգա\" : \"Չի գալիս\"}${rsvp.guestNames ? `\\nՀյուրեր: ${rsvp.guestNames}` : \"\"}\\n\\nՀաստատվել է: ${rsvp.createdAt ? new Date(rsvp.createdAt).toLocaleString(\"hy-AM\") : new Date().toLocaleString(\"hy-AM\")}`,\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: white;\">\n            <h2 style=\"color: #333; text-align: center; font-weight: normal;\">Նոր հաստատում ձեր հարսանիքի համար</h2>\n            \n            <div style=\"background-color: #f9f9f9; padding: 20px; border-radius: 8px; margin: 20px 0; border: 1px solid #e0e0e0;\">\n              <h3 style=\"color: #333; margin-bottom: 15px; font-weight: normal;\">Հյուրի տվյալներ</h3>\n              <p style=\"margin: 8px 0;\"><strong>Անուն:</strong> ${rsvp.firstName} ${rsvp.lastName}</p>\n              <p style=\"margin: 8px 0;\"><strong>Էլ․ հասցե:</strong> ${rsvp.email}</p>\n              <p style=\"margin: 8px 0;\"><strong>Հյուրերի քանակ:</strong> ${rsvp.guestCount}</p>\n              <p style=\"margin: 8px 0;\"><strong>Մասնակցություն:</strong> ${attendanceText}</p>\n              ${guestInfo}\n            </div>\n            \n            <div style=\"text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd;\">\n              <p style=\"color: #666; font-size: 14px; margin: 0;\">Հաստատվել է: ${rsvp.createdAt ? new Date(rsvp.createdAt).toLocaleString(\"hy-AM\") : new Date().toLocaleString(\"hy-AM\")}</p>\n            </div>\n          </div>\n        `,\n      }),\n    );\n\n    const results = await Promise.allSettled(emailPromises);\n\n    // Detailed logging for each email attempt\n    results.forEach((result, index) => {\n      const email = COUPLE_EMAILS[index];\n      if (result.status === \"fulfilled\") {\n        console.log(`✅ Email sent successfully to: ${email}`, result.value);\n      } else {\n        console.error(`❌ Email failed to: ${email}`, result.reason);\n      }\n    });\n\n    const successCount = results.filter(\n      (result) => result.status === \"fulfilled\",\n    ).length;\n    console.log(\n      `RSVP notification emails sent: ${successCount}/${COUPLE_EMAILS.length}`,\n    );\n    return successCount > 0;\n  } catch (error) {\n    console.error(\"Failed to send RSVP notification emails:\", error);\n    return false;\n  }\n}\n\nexport async function sendRsvpConfirmationEmail(rsvp: Rsvp): Promise<boolean> {\n  const resend = getResendInstance();\n  if (!resend) {\n    console.log(\n      \"Email service not configured. Skipping RSVP confirmation email.\",\n    );\n    return false;\n  }\n\n  try {\n    const attendanceText =\n      rsvp.attendance === \"attending\"\n        ? \"Շատ ուրախ ենք, որ կգաք մեր հարսանիքին! 💕\"\n        : \"Ցավոք, որ չեք կարողանա գալ: Ցանկանում ենք ձեզ բարելավություն: 💙\";\n\n    await resend.emails.send({\n      from: \"Հարութ և Տաթև <onboarding@resend.dev>\",\n      to: rsvp.email,\n      subject: \"Ձեր հաստատումը ստացվել է - Հարսանիք 10 Հոկտեմբեր 2025\",\n      text: `Սիրելի ${rsvp.firstName},\\n\\nՇնորհակալություն ձեր հաստատման համար:\\n\\n${attendanceText}\\n\\n${rsvp.attendance === \"attending\" ? \"Ծիսակարգություն - Սուրբ Գրիգոր Լուսավորիչ Եկեղեցի, Ժամը 16:00\\nՀանդես - BAYAZET HALL, Ժամը 19:00\\n\\nՄենք շատ ենք սիրում ձեզ և սպասում ենք այս հատուկ օրը ձեզ հետ կիսելուն:\" : \"\"}\\n\\nՀարցերի դեպքում կապվեք մեզ հետ:\\nharutavetisyan0@gmail.com | tatevhovsepyan22@gmail.com\\n\\nՀարգանքով,\\nՀարութ և Տաթև`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #E4A5B8; font-style: italic;\">Հարութ & Տաթև</h1>\n            <p style=\"color: #666; font-size: 18px;\">10 Հոկտեմբեր 2025</p>\n          </div>\n          \n          <div style=\"background-color: #f9f9f9; padding: 25px; border-radius: 15px; text-align: center;\">\n            <h2 style=\"color: #333; margin-bottom: 15px;\">Շնորհակալություն ${rsvp.firstName}ը!</h2>\n            <p style=\"font-size: 16px; line-height: 1.6; color: #555;\">${attendanceText}</p>\n            \n            ${\n              rsvp.attendance === \"attending\"\n                ? `\n              <div style=\"margin: 20px 0; padding: 15px; background-color: white; border-radius: 10px;\">\n                <h3 style=\"color: #E4A5B8; margin-bottom: 10px;\">📍 Ծիսակարգություն</h3>\n                <p><strong>Սուրբ Գրիգոր Լուսավորիչ Եկեղեցի</strong><br/>\n                Ժամը 16:00</p>\n                \n                <h3 style=\"color: #E4A5B8; margin: 15px 0 10px 0;\">🍾 Հանդես</h3>\n                <p><strong>BAYAZET HALL</strong><br/>\n                Ժամը 19:00</p>\n              </div>\n              \n              <p style=\"color: #666; font-size: 14px; margin-top: 20px;\">\n                Մենք շատ ենք սիրում ձեզ և սպասում ենք այս հատուկ օրը ձեզ հետ կիսելուն: 💐\n              </p>\n            `\n                : \"\"\n            }\n          </div>\n          \n          <div style=\"text-align: center; margin-top: 20px; color: #999; font-size: 12px;\">\n            <p>Հարցերի դեպքում կապվեք մեզ հետ:</p>\n            <p>harutavetisyan0@gmail.com | tatevhovsepyan22@gmail.com</p>\n          </div>\n        </div>\n      `,\n    });\n\n    console.log(`RSVP confirmation email sent to: ${rsvp.email}`);\n    return true;\n  } catch (error) {\n    console.error(\"Failed to send RSVP confirmation email:\", error);\n    return false;\n  }\n}\n","size_bytes":9193},"client/public/audio/README.md":{"content":"# Wedding Background Music\n\n## How to Add Your Music\n\n1. **Add your music file** to this folder (`client/public/audio/`)\n2. **Rename your file** to `wedding-music.mp3` (or update the file name in `hero-section.tsx`)\n3. **Supported formats**: MP3, WAV, OGG\n\n## Important Notes\n\n- **Copyright**: Only use music you have legal rights to use\n- **File size**: Keep files under 10MB for best performance\n- **Volume**: The player is set to 30% volume by default\n\n## For Adele Love Song\n\nSince you requested an Adele love song, you'll need to:\n1. Purchase/legally obtain the song (from iTunes, Amazon Music, etc.)\n2. Convert it to MP3 format if needed\n3. Place it in this folder as `wedding-music.mp3`\n\nPopular Adele love songs for weddings:\n- Make You Feel My Love\n- All I Ask\n- Someone Like You\n- Hello\n\n## Current Setup\n\nThe music player will:\n- Loop continuously\n- Start/stop with the music button in the hero section\n- Play at 30% volume\n- Show appropriate play/pause icons","size_bytes":970},"client/src/components/ObjectUploader.tsx":{"content":"import { useState, useRef } from \"react\";\nimport type { ReactNode } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (files: File[]) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A simple file upload component for guest photos\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 10,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleButtonClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    if (files.length === 0) return;\n\n    // Filter to only images and respect file limits\n    const imageFiles = files.filter(file => file.type.startsWith('image/')).slice(0, maxNumberOfFiles);\n    \n    // Check file sizes\n    const validFiles = imageFiles.filter(file => file.size <= maxFileSize);\n    \n    if (validFiles.length !== imageFiles.length) {\n      alert('Some files were too large and skipped (max 10MB per file)');\n    }\n\n    if (validFiles.length === 0) return;\n\n    setIsUploading(true);\n    \n    try {\n      const uploadedFiles: File[] = [];\n      \n      for (const file of validFiles) {\n        try {\n          const { url } = await onGetUploadParameters();\n          \n          const uploadResponse = await fetch(url, {\n            method: 'PUT',\n            body: file,\n            headers: {\n              'Content-Type': file.type,\n            },\n          });\n          \n          if (uploadResponse.ok) {\n            // After successful upload, register the photo with the backend\n            const registerResponse = await fetch('/api/photos', {\n              method: 'PUT',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                photoURL: url,\n              }),\n            });\n            \n            if (registerResponse.ok) {\n              uploadedFiles.push(file);\n            } else {\n              console.error('Failed to register photo:', await registerResponse.text());\n            }\n          }\n        } catch (error) {\n          console.error('Upload failed for file:', file.name, error);\n        }\n      }\n      \n      if (uploadedFiles.length > 0) {\n        onComplete?.(uploadedFiles);\n      }\n    } catch (error) {\n      console.error('Upload process failed:', error);\n    } finally {\n      setIsUploading(false);\n      // Reset the input\n      event.target.value = '';\n    }\n  };\n\n  return (\n    <div>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept=\"image/*\"\n        onChange={handleFileUpload}\n        style={{ display: 'none' }}\n        disabled={isUploading}\n      />\n      <Button \n        onClick={handleButtonClick}\n        className={buttonClassName} \n        disabled={isUploading}\n        data-testid=\"button-upload-photos\"\n      >\n        {isUploading ? 'Վերբեռնվում է...' : children}\n      </Button>\n    </div>\n  );\n}","size_bytes":3399},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":5543},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":8407},"client/src/components/admin-panel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Settings, Shield, Users, Download, Mail, Calendar, CheckCircle, XCircle, Eye, QrCode, Printer, Link2 } from \"lucide-react\";\n\ninterface Rsvp {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  guestCount: string;\n  guestNames?: string | null;\n  attendance: string;\n  createdAt: string;\n}\n\nexport function AdminPanel() {\n  const [password, setPassword] = useState(\"\");\n  const [authenticated, setAuthenticated] = useState(false);\n  const [maintenanceEnabled, setMaintenanceEnabled] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [rsvps, setRsvps] = useState<Rsvp[]>([]);\n  const [rsvpCount, setRsvpCount] = useState(0);\n  const [attendingCount, setAttendingCount] = useState(0);\n  const [notAttendingCount, setNotAttendingCount] = useState(0);\n  const [selectedRsvp, setSelectedRsvp] = useState<Rsvp | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (authenticated) {\n      loadData();\n    }\n  }, [authenticated]);\n\n  const loadData = async () => {\n    try {\n      // Load maintenance status first\n      const maintenanceResponse = await fetch(\"/api/maintenance\");\n      const maintenanceData = await maintenanceResponse.json();\n      console.log(\"🔧 Maintenance status loaded:\", maintenanceData);\n      setMaintenanceEnabled(maintenanceData.enabled);\n      \n      // Load RSVP data\n      const rsvpResponse = await fetch(\"/api/rsvps\");\n      const rsvpData = await rsvpResponse.json();\n      \n      setRsvps(rsvpData);\n      setRsvpCount(rsvpData.length);\n      \n      // Calculate attendance statistics\n      const attending = rsvpData.filter((rsvp: Rsvp) => rsvp.attendance === \"attending\").length;\n      const notAttending = rsvpData.filter((rsvp: Rsvp) => rsvp.attendance === \"not-attending\").length;\n      \n      setAttendingCount(attending);\n      setNotAttendingCount(notAttending);\n    } catch (error) {\n      console.error(\"Failed to load admin data:\", error);\n    }\n  };\n\n  const handleAuthenticate = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (password === \"haruttev2025admin\") {\n      setAuthenticated(true);\n      toast({\n        title: \"Authentication successful\",\n        description: \"Welcome to admin panel\",\n      });\n    } else {\n      toast({\n        title: \"Authentication failed\",\n        description: \"Wrong password\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleMaintenanceToggle = async (enabled: boolean) => {\n    setLoading(true);\n    try {\n      console.log(\"🔄 Toggling maintenance mode to:\", enabled);\n      const response = await fetch(\"/api/maintenance\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          enabled,\n          password: \"haruttev2025admin\"\n        }),\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        console.log(\"✅ Maintenance mode updated:\", result);\n        setMaintenanceEnabled(enabled);\n        // Reload data to confirm the change\n        await loadData();\n        toast({\n          title: enabled ? \"Maintenance mode enabled\" : \"Maintenance mode disabled\",\n          description: enabled \n            ? \"Website is now in maintenance mode\" \n            : \"Website is now accessible to public\",\n        });\n      } else {\n        throw new Error(\"Failed to update maintenance mode\");\n      }\n    } catch (error) {\n      console.error(\"Failed to toggle maintenance mode:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update maintenance mode\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const clearMaintenanceBypass = () => {\n    localStorage.removeItem(\"maintenance-bypass\");\n    toast({\n      title: \"Bypass cleared\",\n      description: \"Maintenance bypass has been cleared\",\n    });\n  };\n\n  const exportToCSV = () => {\n    if (rsvps.length === 0) {\n      toast({\n        title: \"No data to export\",\n        description: \"There are no RSVP responses to export\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const headers = [\n      \"First Name\",\n      \"Last Name\", \n      \"Email\",\n      \"Guest Count\",\n      \"Guest Names\",\n      \"Attendance\",\n      \"Submitted Date\"\n    ];\n\n    const csvContent = [\n      headers.join(\",\"),\n      ...rsvps.map(rsvp => [\n        `\"${rsvp.firstName}\"`,\n        `\"${rsvp.lastName}\"`,\n        `\"${rsvp.email}\"`,\n        `\"${rsvp.guestCount}\"`,\n        `\"${rsvp.guestNames || ''}\"`,\n        `\"${rsvp.attendance === 'attending' ? 'Attending' : 'Not Attending'}\"`,\n        `\"${new Date(rsvp.createdAt).toLocaleDateString()}\"`\n      ].join(\",\"))\n    ].join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = `wedding-rsvps-${new Date().toISOString().split('T')[0]}.csv`;\n    link.click();\n    window.URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Export successful\",\n      description: `Exported ${rsvps.length} RSVP responses to CSV`,\n    });\n  };\n\n  const sendEmailReminders = async () => {\n    const emailList = rsvps.map(rsvp => rsvp.email).join(', ');\n    \n    // Copy to clipboard for now - real email integration would require more setup\n    try {\n      await navigator.clipboard.writeText(emailList);\n      toast({\n        title: \"Email addresses copied\",\n        description: `${rsvps.length} email addresses copied to clipboard. You can use these to send reminders via your preferred email service.`,\n      });\n    } catch (error) {\n      // Fallback for browsers that don't support clipboard API\n      const textArea = document.createElement(\"textarea\");\n      textArea.value = emailList;\n      document.body.appendChild(textArea);\n      textArea.select();\n      document.execCommand('copy');\n      document.body.removeChild(textArea);\n      \n      toast({\n        title: \"Email addresses copied\",\n        description: `${rsvps.length} email addresses copied to clipboard`,\n      });\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (!authenticated) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-cream-50 via-cream-100 to-gold-50 flex items-center justify-center px-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <Shield className=\"w-12 h-12 text-gold-500 mx-auto mb-2\" />\n            <CardTitle>Admin Access</CardTitle>\n            <CardDescription>Wedding Website Admin Panel</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleAuthenticate} className=\"space-y-4\">\n              <Input\n                type=\"password\"\n                placeholder=\"Admin password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                data-testid=\"admin-password-input\"\n                autoFocus\n              />\n              <Button type=\"submit\" className=\"w-full\" data-testid=\"admin-login-button\">\n                Login\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-cream-50 via-cream-100 to-gold-50 p-4\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"text-center space-y-2\">\n          <h1 className=\"text-3xl font-playfair font-bold text-charcoal-900\">\n            Admin Panel\n          </h1>\n          <p className=\"text-charcoal-600\">\n            Հարություն & Տաթև Wedding Website Control\n          </p>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total RSVPs</CardTitle>\n              <Users className=\"h-4 w-4 text-gold-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gold-600\">{rsvpCount}</div>\n              <p className=\"text-xs text-charcoal-500\">Total responses</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Attending</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{attendingCount}</div>\n              <p className=\"text-xs text-charcoal-500\">Will attend</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Not Attending</CardTitle>\n              <XCircle className=\"h-4 w-4 text-red-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">{notAttendingCount}</div>\n              <p className=\"text-xs text-charcoal-500\">Cannot attend</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Days Until Wedding</CardTitle>\n              <Calendar className=\"h-4 w-4 text-gold-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gold-600\">\n                {Math.ceil((new Date(\"2025-10-10\").getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))}\n              </div>\n              <p className=\"text-xs text-charcoal-500\">October 10, 2025</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* QR Code for Photo Sharing */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <QrCode className=\"w-5 h-5 text-softGold\" />\n              Photo Sharing QR Code\n            </CardTitle>\n            <CardDescription>\n              QR code for guests to easily access the photo upload page (harutandtatev.com/photos)\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex flex-col md:flex-row gap-4 items-center\">\n              {/* QR Code Display */}\n              <div className=\"bg-white p-4 rounded-lg border-2 border-softGold/20\">\n                <img \n                  src=\"/wedding-photos-qr.png\" \n                  alt=\"Wedding Photos QR Code\" \n                  className=\"w-48 h-48 mx-auto\"\n                />\n              </div>\n              \n              {/* QR Code Actions */}\n              <div className=\"space-y-3 flex-1\">\n                <div className=\"text-sm text-charcoal/70\">\n                  <p><strong>URL:</strong> harutandtatev.com/photos</p>\n                  <p className=\"mt-2\">Print this QR code and place it at your wedding venue so guests can easily share their photos!</p>\n                </div>\n                \n                <div className=\"flex flex-wrap gap-2\">\n                  <Button\n                    onClick={() => window.open('/wedding-photos-qr.png', '_blank')}\n                    className=\"bg-softGold hover:bg-softGold/90\"\n                    size=\"sm\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Download QR Code\n                  </Button>\n                  \n                  <Button\n                    onClick={() => window.print()}\n                    variant=\"outline\"\n                    size=\"sm\"\n                  >\n                    <Printer className=\"w-4 h-4 mr-2\" />\n                    Print Page\n                  </Button>\n                  \n                  <Button\n                    onClick={() => {\n                      navigator.clipboard.writeText('https://harutandtatev.com/photos');\n                      toast({\n                        title: \"Link copied!\",\n                        description: \"Photo sharing link copied to clipboard\",\n                      });\n                    }}\n                    variant=\"outline\"\n                    size=\"sm\"\n                  >\n                    <Link2 className=\"w-4 h-4 mr-2\" />\n                    Copy Link\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Maintenance Control */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Maintenance Mode Control</CardTitle>\n            <CardDescription>\n              Toggle website access for visitors. You can still preview with the password.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <label className=\"text-sm font-medium\">Maintenance Mode</label>\n                <p className=\"text-sm text-charcoal-500\">\n                  {maintenanceEnabled \n                    ? \"Website is currently hidden from visitors\" \n                    : \"Website is publicly accessible\"\n                  }\n                </p>\n              </div>\n              <Switch\n                checked={maintenanceEnabled}\n                onCheckedChange={handleMaintenanceToggle}\n                disabled={loading}\n                data-testid=\"maintenance-toggle\"\n              />\n            </div>\n\n            <div className=\"flex gap-2 pt-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => window.open(\"/\", \"_blank\")}\n                className=\"flex-1\"\n                data-testid=\"preview-website\"\n              >\n                Preview Website\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={clearMaintenanceBypass}\n                className=\"flex-1\"\n                data-testid=\"clear-bypass\"\n              >\n                Clear Bypass\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* RSVP Management */}\n        <Card>\n          <CardHeader>\n            <CardTitle>RSVP Responses</CardTitle>\n            <CardDescription>\n              Manage wedding guest responses and send reminders\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Action Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-2\">\n              <Button\n                onClick={exportToCSV}\n                disabled={rsvps.length === 0}\n                className=\"flex-1\"\n                data-testid=\"export-csv\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export to CSV ({rsvps.length})\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={sendEmailReminders}\n                disabled={rsvps.length === 0}\n                className=\"flex-1\"\n                data-testid=\"copy-emails\"\n              >\n                <Mail className=\"w-4 h-4 mr-2\" />\n                Copy Email Addresses\n              </Button>\n            </div>\n\n            {/* RSVP Table */}\n            {rsvps.length > 0 ? (\n              <div className=\"border rounded-lg overflow-hidden\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Email</TableHead>\n                      <TableHead>Guests</TableHead>\n                      <TableHead>Guest Names</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Details</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {rsvps.map((rsvp) => (\n                      <TableRow key={rsvp.id}>\n                        <TableCell className=\"font-medium\">\n                          {rsvp.firstName} {rsvp.lastName}\n                        </TableCell>\n                        <TableCell className=\"text-sm text-charcoal-600\">\n                          {rsvp.email}\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gold-100 text-gold-800\">\n                            {rsvp.guestCount}\n                          </span>\n                        </TableCell>\n                        <TableCell className=\"text-sm max-w-48 truncate\">\n                          {rsvp.guestNames || \"-\"}\n                        </TableCell>\n                        <TableCell>\n                          {rsvp.attendance === \"attending\" ? (\n                            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                              Attending\n                            </span>\n                          ) : (\n                            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n                              <XCircle className=\"w-3 h-3 mr-1\" />\n                              Not Attending\n                            </span>\n                          )}\n                        </TableCell>\n                        <TableCell className=\"text-sm text-charcoal-600\">\n                          {formatDate(rsvp.createdAt)}\n                        </TableCell>\n                        <TableCell>\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"h-8 w-8 p-0\"\n                                onClick={() => setSelectedRsvp(rsvp)}\n                                data-testid={`view-details-${rsvp.id}`}\n                              >\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent className=\"max-w-md\">\n                              <DialogHeader>\n                                <DialogTitle>RSVP Details</DialogTitle>\n                                <DialogDescription>\n                                  Complete information for this guest response\n                                </DialogDescription>\n                              </DialogHeader>\n                              <div className=\"space-y-4\">\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                  <div>\n                                    <label className=\"text-sm font-medium text-gray-600\">First Name</label>\n                                    <p className=\"text-sm font-semibold\">{rsvp.firstName}</p>\n                                  </div>\n                                  <div>\n                                    <label className=\"text-sm font-medium text-gray-600\">Last Name</label>\n                                    <p className=\"text-sm font-semibold\">{rsvp.lastName}</p>\n                                  </div>\n                                </div>\n                                \n                                <div>\n                                  <label className=\"text-sm font-medium text-gray-600\">Email Address</label>\n                                  <p className=\"text-sm font-semibold\">{rsvp.email}</p>\n                                </div>\n                                \n                                <div className=\"grid grid-cols-2 gap-4\">\n                                  <div>\n                                    <label className=\"text-sm font-medium text-gray-600\">Guest Count</label>\n                                    <p className=\"text-sm font-semibold\">{rsvp.guestCount}</p>\n                                  </div>\n                                  <div>\n                                    <label className=\"text-sm font-medium text-gray-600\">Attendance</label>\n                                    <div className=\"flex items-center mt-1\">\n                                      {rsvp.attendance === \"attending\" ? (\n                                        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                          Attending\n                                        </span>\n                                      ) : (\n                                        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n                                          <XCircle className=\"w-3 h-3 mr-1\" />\n                                          Not Attending\n                                        </span>\n                                      )}\n                                    </div>\n                                  </div>\n                                </div>\n                                \n                                <div>\n                                  <label className=\"text-sm font-medium text-gray-600\">Guest Names</label>\n                                  <p className=\"text-sm font-semibold break-words\">\n                                    {rsvp.guestNames || \"No guest names provided\"}\n                                  </p>\n                                </div>\n                                \n                                <div>\n                                  <label className=\"text-sm font-medium text-gray-600\">Submission Date</label>\n                                  <p className=\"text-sm font-semibold\">{formatDate(rsvp.createdAt)}</p>\n                                </div>\n                                \n                                <div>\n                                  <label className=\"text-sm font-medium text-gray-600\">Response ID</label>\n                                  <p className=\"text-xs font-mono text-gray-500 break-all\">{rsvp.id}</p>\n                                </div>\n                              </div>\n                            </DialogContent>\n                          </Dialog>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Users className=\"w-12 h-12 text-charcoal-300 mx-auto mb-2\" />\n                <p className=\"text-charcoal-500\">No RSVP responses yet</p>\n                <p className=\"text-sm text-charcoal-400\">Guest responses will appear here</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* RSVP Export & Email Tools */}\n        <Card>\n          <CardHeader>\n            <CardTitle>RSVP Management</CardTitle>\n            <CardDescription>\n              Export guest data and send email reminders\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              <Button\n                onClick={exportToCSV}\n                disabled={rsvps.length === 0}\n                className=\"w-full\"\n                data-testid=\"export-csv\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export to CSV ({rsvps.length})\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={sendEmailReminders}\n                disabled={rsvps.length === 0}\n                className=\"w-full\"\n                data-testid=\"copy-emails\"\n              >\n                <Mail className=\"w-4 h-4 mr-2\" />\n                Copy Email Addresses\n              </Button>\n            </div>\n            \n            {rsvps.length === 0 && (\n              <div className=\"text-center py-4 bg-amber-50 rounded-lg border border-amber-200\">\n                <Users className=\"w-8 h-8 text-amber-500 mx-auto mb-2\" />\n                <p className=\"text-sm text-amber-700 font-medium\">No RSVP responses yet</p>\n                <p className=\"text-xs text-amber-600\">Guest responses will appear here for export</p>\n              </div>\n            )}\n\n            {/* Show RSVP Details if any exist */}\n            {rsvps.length > 0 && (\n              <div className=\"border rounded-lg overflow-hidden\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Email</TableHead>\n                      <TableHead>Guests</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Details</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {rsvps.map((rsvp) => (\n                      <TableRow key={rsvp.id}>\n                        <TableCell className=\"font-medium\">\n                          {rsvp.firstName} {rsvp.lastName}\n                        </TableCell>\n                        <TableCell className=\"text-sm\">\n                          {rsvp.email}\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"px-2 py-1 rounded-full text-xs bg-gold-100 text-gold-800\">\n                            {rsvp.guestCount}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          {rsvp.attendance === \"attending\" ? (\n                            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs bg-green-100 text-green-800\">\n                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                              Attending\n                            </span>\n                          ) : (\n                            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs bg-red-100 text-red-800\">\n                              <XCircle className=\"w-3 h-3 mr-1\" />\n                              Not Attending\n                            </span>\n                          )}\n                        </TableCell>\n                        <TableCell className=\"text-sm\">\n                          {formatDate(rsvp.createdAt)}\n                        </TableCell>\n                        <TableCell>\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"h-8 w-8 p-0\"\n                                onClick={() => setSelectedRsvp(rsvp)}\n                                data-testid={`view-details-${rsvp.id}`}\n                              >\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent className=\"max-w-md\">\n                              <DialogHeader>\n                                <DialogTitle>RSVP Details</DialogTitle>\n                                <DialogDescription>\n                                  Complete information for this guest response\n                                </DialogDescription>\n                              </DialogHeader>\n                              <div className=\"space-y-4\">\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                  <div>\n                                    <label className=\"text-sm font-medium text-gray-600\">First Name</label>\n                                    <p className=\"text-sm font-semibold\">{rsvp.firstName}</p>\n                                  </div>\n                                  <div>\n                                    <label className=\"text-sm font-medium text-gray-600\">Last Name</label>\n                                    <p className=\"text-sm font-semibold\">{rsvp.lastName}</p>\n                                  </div>\n                                </div>\n                                \n                                <div>\n                                  <label className=\"text-sm font-medium text-gray-600\">Email Address</label>\n                                  <p className=\"text-sm font-semibold\">{rsvp.email}</p>\n                                </div>\n                                \n                                <div className=\"grid grid-cols-2 gap-4\">\n                                  <div>\n                                    <label className=\"text-sm font-medium text-gray-600\">Guest Count</label>\n                                    <p className=\"text-sm font-semibold\">{rsvp.guestCount}</p>\n                                  </div>\n                                  <div>\n                                    <label className=\"text-sm font-medium text-gray-600\">Attendance</label>\n                                    <div className=\"flex items-center mt-1\">\n                                      {rsvp.attendance === \"attending\" ? (\n                                        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                          Attending\n                                        </span>\n                                      ) : (\n                                        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n                                          <XCircle className=\"w-3 h-3 mr-1\" />\n                                          Not Attending\n                                        </span>\n                                      )}\n                                    </div>\n                                  </div>\n                                </div>\n                                \n                                <div>\n                                  <label className=\"text-sm font-medium text-gray-600\">Guest Names</label>\n                                  <p className=\"text-sm font-semibold break-words\">\n                                    {rsvp.guestNames || \"No guest names provided\"}\n                                  </p>\n                                </div>\n                                \n                                <div>\n                                  <label className=\"text-sm font-medium text-gray-600\">Submission Date</label>\n                                  <p className=\"text-sm font-semibold\">{formatDate(rsvp.createdAt)}</p>\n                                </div>\n                                \n                                <div>\n                                  <label className=\"text-sm font-medium text-gray-600\">Response ID</label>\n                                  <p className=\"text-xs font-mono text-gray-500 break-all\">{rsvp.id}</p>\n                                </div>\n                              </div>\n                            </DialogContent>\n                          </Dialog>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button\n              variant=\"outline\"\n              onClick={() => window.open(\"/\", \"_blank\")}\n              className=\"w-full justify-start\"\n              data-testid=\"preview-website\"\n            >\n              <Shield className=\"w-4 h-4 mr-2\" />\n              Preview Website\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                localStorage.removeItem(\"maintenance-bypass\");\n                window.location.href = \"/\";\n              }}\n              className=\"w-full justify-start\"\n              data-testid=\"logout-admin\"\n            >\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Exit Admin & Test as Visitor\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":33905},"client/src/components/maintenance-mode.tsx":{"content":"import { useState } from \"react\";\nimport { weddingConfig } from \"@/config/wedding-config\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Heart, Lock } from \"lucide-react\";\n\ninterface MaintenanceModeProps {\n  onPasswordCorrect: () => void;\n}\n\nexport function MaintenanceMode({ onPasswordCorrect }: MaintenanceModeProps) {\n  const [password, setPassword] = useState(\"\");\n  const [showPasswordInput, setShowPasswordInput] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handlePasswordSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError(\"\");\n\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    if (password === weddingConfig.maintenance.password) {\n      onPasswordCorrect();\n    } else {\n      setError(weddingConfig.maintenance.wrongPassword);\n    }\n    setIsLoading(false);\n  };\n\n  // Calculate days until wedding\n  const weddingDate = new Date(weddingConfig.wedding.date);\n  const today = new Date();\n  const diffTime = weddingDate.getTime() - today.getTime();\n  const daysUntil = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-cream-50 via-cream-100 to-gold-50 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full text-center space-y-8\">\n        {/* Decorative Hearts */}\n        <div className=\"flex justify-center space-x-4 mb-8\">\n          <Heart className=\"w-8 h-8 text-gold-400 fill-current animate-pulse\" />\n          <Heart className=\"w-10 h-10 text-gold-500 fill-current animate-pulse\" style={{ animationDelay: \"0.5s\" }} />\n          <Heart className=\"w-8 h-8 text-gold-400 fill-current animate-pulse\" style={{ animationDelay: \"1s\" }} />\n        </div>\n\n        {/* Main Content */}\n        <div className=\"space-y-6\">\n          <h1 className=\"text-4xl md:text-5xl font-playfair font-bold text-charcoal-900 leading-tight\">\n            {weddingConfig.maintenance.title}\n          </h1>\n          \n          <p className=\"text-xl text-gold-600 font-medium\">\n            {weddingConfig.maintenance.subtitle}\n          </p>\n\n          <p className=\"text-lg text-charcoal-700 leading-relaxed max-w-sm mx-auto\">\n            {weddingConfig.maintenance.message}\n          </p>\n\n          {/* Wedding Countdown */}\n          {daysUntil > 0 && (\n            <div className=\"bg-white/50 backdrop-blur-sm rounded-lg p-6 border border-gold-200 shadow-sm\">\n              <p className=\"text-sm text-charcoal-600 mb-2\">{weddingConfig.maintenance.countdownText}</p>\n              <div className=\"text-3xl font-bold text-gold-600\">\n                {daysUntil} {weddingConfig.countdown.labels.days}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Password Section */}\n        <div className=\"space-y-4\">\n          {!showPasswordInput ? (\n            <Button\n              onClick={() => setShowPasswordInput(true)}\n              variant=\"outline\"\n              className=\"bg-white/70 border-gold-300 text-charcoal-700 hover:bg-gold-50 transition-all duration-300\"\n              data-testid=\"show-password-input\"\n            >\n              <Lock className=\"w-4 h-4 mr-2\" />\n              {weddingConfig.maintenance.enterPassword}\n            </Button>\n          ) : (\n            <form onSubmit={handlePasswordSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <p className=\"text-sm text-charcoal-600\">\n                  {weddingConfig.maintenance.passwordPrompt}\n                </p>\n                <Input\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"••••••••\"\n                  className=\"text-center bg-white/70 border-gold-300 focus:border-gold-400 focus:ring-gold-400\"\n                  data-testid=\"password-input\"\n                  autoFocus\n                />\n                {error && (\n                  <p className=\"text-sm text-red-500 font-medium\" data-testid=\"error-message\">\n                    {error}\n                  </p>\n                )}\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  type=\"submit\"\n                  disabled={isLoading || !password}\n                  className=\"flex-1 bg-gold-500 hover:bg-gold-600 text-white transition-all duration-300\"\n                  data-testid=\"submit-password\"\n                >\n                  {isLoading ? \"...\" : \"Մուտք\"}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowPasswordInput(false);\n                    setPassword(\"\");\n                    setError(\"\");\n                  }}\n                  className=\"bg-white/70 border-gold-300 text-charcoal-700 hover:bg-gold-50\"\n                  data-testid=\"cancel-password\"\n                >\n                  Չեղարկել\n                </Button>\n              </div>\n            </form>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"pt-8 text-sm text-charcoal-500\">\n          <p>Հարութ ∞ Տաթև</p>\n          <p className=\"mt-1\">{weddingConfig.wedding.displayDate}</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5500},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"client/src/components/loading-screen.tsx":{"content":"export default function LoadingScreen() {\n  return (\n    <div className=\"fixed inset-0 bg-gradient-to-br from-cream via-white to-warmBeige/20 flex items-center justify-center z-50\">\n      {/* Beating Heart */}\n      <svg\n        viewBox=\"0 0 32 29.6\"\n        className=\"w-20 h-20 fill-current animate-heartbeat text-softGold\"\n        style={{\n          filter: \"drop-shadow(0 6px 12px rgba(218, 165, 32, 0.4))\",\n        }}\n      >\n        <path\n          d=\"M23.6,0c-2.9,0-5.6,1.4-7.6,3.6C14,1.4,11.3,0,8.4,0\n           C3.8,0,0,3.8,0,8.4c0,9.2,16,21.2,16,21.2s16-12,16-21.2\n           C32,3.8,28.2,0,23.6,0z\"\n        />\n      </svg>\n    </div>\n  );\n}","size_bytes":651},"client/public/sw.js":{"content":"// Wedding Photo PWA Service Worker\nconst CACHE_NAME = 'wedding-photos-v1';\nconst OFFLINE_CACHE = 'wedding-photos-offline-v1';\n\n// Files to cache for offline functionality\nconst urlsToCache = [\n  '/',\n  '/photos',\n  '/static/js/bundle.js',\n  '/static/css/main.css',\n  '/favicon.png',\n  '/manifest.json'\n];\n\n// Install event - cache essential files\nself.addEventListener('install', (event) => {\n  console.log('[SW] Installing service worker...');\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('[SW] Caching app shell');\n        return cache.addAll(urlsToCache);\n      })\n  );\n  self.skipWaiting();\n});\n\n// Activate event - clean up old caches\nself.addEventListener('activate', (event) => {\n  console.log('[SW] Activating service worker...');\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME && cacheName !== OFFLINE_CACHE) {\n            console.log('[SW] Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n  self.clients.claim();\n});\n\n// Fetch event - serve from cache, fallback to network\nself.addEventListener('fetch', (event) => {\n  // Handle photo uploads - always try network first for API calls\n  if (event.request.url.includes('/api/photos')) {\n    event.respondWith(\n      fetch(event.request)\n        .then((response) => {\n          return response;\n        })\n        .catch(() => {\n          // If offline, store the request for later sync\n          return storeOfflineUpload(event.request);\n        })\n    );\n    return;\n  }\n\n  // Handle other requests with cache-first strategy\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Return cached version or fetch from network\n        return response || fetch(event.request);\n      })\n      .catch(() => {\n        // If both cache and network fail, show offline page\n        if (event.request.destination === 'document') {\n          return caches.match('/photos');\n        }\n      })\n  );\n});\n\n// Store failed uploads for background sync\nasync function storeOfflineUpload(request) {\n  const formData = await request.formData();\n  const offlineUploads = JSON.parse(localStorage.getItem('offlineUploads') || '[]');\n  \n  // Convert FormData to storable format\n  const uploadData = {};\n  for (let [key, value] of formData.entries()) {\n    if (value instanceof File) {\n      // Convert file to base64 for storage\n      uploadData[key] = {\n        name: value.name,\n        type: value.type,\n        size: value.size,\n        data: await fileToBase64(value)\n      };\n    } else {\n      uploadData[key] = value;\n    }\n  }\n  \n  offlineUploads.push({\n    url: request.url,\n    method: request.method,\n    data: uploadData,\n    timestamp: Date.now()\n  });\n  \n  localStorage.setItem('offlineUploads', JSON.stringify(offlineUploads));\n  \n  return new Response(\n    JSON.stringify({ \n      success: false, \n      message: 'Upload queued for when you\\'re back online' \n    }),\n    { \n      status: 202,\n      headers: { 'Content-Type': 'application/json' }\n    }\n  );\n}\n\n// Helper function to convert file to base64\nfunction fileToBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = (error) => reject(error);\n  });\n}\n\n// Background sync for offline uploads\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'background-sync-photos') {\n    event.waitUntil(syncOfflineUploads());\n  }\n});\n\nasync function syncOfflineUploads() {\n  const offlineUploads = JSON.parse(localStorage.getItem('offlineUploads') || '[]');\n  \n  for (let i = offlineUploads.length - 1; i >= 0; i--) {\n    const upload = offlineUploads[i];\n    \n    try {\n      // Reconstruct FormData from stored data\n      const formData = new FormData();\n      for (let [key, value] of Object.entries(upload.data)) {\n        if (value && typeof value === 'object' && value.data) {\n          // Convert base64 back to file\n          const response = await fetch(value.data);\n          const blob = await response.blob();\n          const file = new File([blob], value.name, { type: value.type });\n          formData.append(key, file);\n        } else {\n          formData.append(key, value);\n        }\n      }\n      \n      // Attempt to upload\n      const response = await fetch(upload.url, {\n        method: upload.method,\n        body: formData\n      });\n      \n      if (response.ok) {\n        // Remove successful upload from queue\n        offlineUploads.splice(i, 1);\n        console.log('[SW] Offline upload synced successfully');\n      }\n    } catch (error) {\n      console.log('[SW] Failed to sync upload:', error);\n    }\n  }\n  \n  localStorage.setItem('offlineUploads', JSON.stringify(offlineUploads));\n}\n\n// Listen for messages from the main thread\nself.addEventListener('message', (event) => {\n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting();\n  }\n  \n  if (event.data && event.data.type === 'SYNC_UPLOADS') {\n    syncOfflineUploads();\n  }\n});","size_bytes":5214},"client/src/pages/photos.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Camera, Heart, Home, Upload } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\n\nexport default function PhotosPage() {\n  const [guestName, setGuestName] = useState(\"\");\n  const [nameSubmitted, setNameSubmitted] = useState(false);\n  const [uploadStatus, setUploadStatus] = useState<string>(\"\");\n  const [uploadedPhotosCount, setUploadedPhotosCount] = useState(0);\n  const MAX_PHOTOS = 25;\n\n  // Get upload parameters using existing API\n  const handleGetUploadParameters = async () => {\n    try {\n      const response = await fetch('/api/photos/upload', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n      });\n      const data = await response.json();\n      return {\n        method: 'PUT' as const,\n        url: data.uploadURL,\n      };\n    } catch (error) {\n      console.error('Failed to get upload URL:', error);\n      throw error;\n    }\n  };\n\n  const handleUploadComplete = async (files: File[]) => {\n    try {\n      const newCount = uploadedPhotosCount + files.length;\n      setUploadedPhotosCount(newCount);\n      \n      // Store the count in localStorage for persistence\n      localStorage.setItem(`wedding-photos-count-${guestName}`, newCount.toString());\n      \n      setUploadStatus(`${files.length} նկար(ներ) հաջողությամբ ավելացվեցին! Շնորհակալություն ${guestName}! (Ընդամենը: ${newCount})`);\n      setTimeout(() => setUploadStatus(\"\"), 5000);\n    } catch (error) {\n      console.error('Failed to complete upload:', error);\n      setUploadStatus(\"Սխալ վերբեռնելիս: Խնդրում ենք կրկին փորձել:\");\n      setTimeout(() => setUploadStatus(\"\"), 4000);\n    }\n  };\n\n  const handleNameSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (guestName.trim()) {\n      setNameSubmitted(true);\n      \n      // Load existing photo count for this guest\n      const savedCount = localStorage.getItem(`wedding-photos-count-${guestName}`);\n      if (savedCount) {\n        setUploadedPhotosCount(parseInt(savedCount));\n      }\n    }\n  };\n\n\n  if (!nameSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-cream via-white to-warmBeige/20 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mb-4\">\n              <Heart className=\"w-16 h-16 mx-auto text-softGold animate-heartbeat\" />\n            </div>\n            <CardTitle className=\"text-2xl\" style={{ fontFamily: \"Playfair Display, serif\" }}>\n              Հարություն & Տաթև\n            </CardTitle>\n            <CardTitle className=\"text-xl text-softGold mb-2\">Wedding Photos 📸</CardTitle>\n            <CardDescription>\n              Share your beautiful memories from our special day\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleNameSubmit} className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">\n                  Your Name / Ձեր անունը\n                </label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Enter your name\"\n                  value={guestName}\n                  onChange={(e) => setGuestName(e.target.value)}\n                  required\n                  className=\"text-center\"\n                  data-testid=\"guest-name-input\"\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full bg-softGold hover:bg-softGold/90\">\n                Start Sharing Photos 🎉\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-cream via-white to-warmBeige/20 p-4\">\n      {/* Header */}\n      <div className=\"text-center mb-6 pt-4\">\n        <h1 className=\"text-3xl font-bold text-charcoal mb-2\" style={{ fontFamily: \"Playfair Display, serif\" }}>\n          Հարություն & Տաթև\n        </h1>\n        <p className=\"text-softGold text-lg\">Wedding Photos 📸</p>\n        <p className=\"text-charcoal/70 mt-2\">Welcome, {guestName}!</p>\n        \n        {/* Back to Main Site */}\n        <Link href=\"/\">\n          <Button variant=\"outline\" size=\"sm\" className=\"mt-2\">\n            <Home className=\"w-4 h-4 mr-1\" />\n            Back to Wedding Site\n          </Button>\n        </Link>\n      </div>\n\n      {/* Upload Progress Bar */}\n      <Card className=\"mb-6\">\n        <CardHeader className=\"text-center pb-2\">\n          <CardTitle className=\"text-lg\">Upload Progress</CardTitle>\n          <CardDescription>\n            {uploadedPhotosCount} of {MAX_PHOTOS} photos uploaded\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm text-charcoal/70\">\n              <span>Photos Uploaded</span>\n              <span>{uploadedPhotosCount}/{MAX_PHOTOS}</span>\n            </div>\n            <Progress \n              value={(uploadedPhotosCount / MAX_PHOTOS) * 100} \n              className=\"h-3\"\n            />\n          </div>\n          \n          {uploadedPhotosCount >= MAX_PHOTOS ? (\n            <div className=\"text-center p-3 bg-green-50 border border-green-200 rounded-lg\">\n              <p className=\"text-green-700 font-medium\">\n                🎉 Maximum photos reached! Thank you for sharing your memories!\n              </p>\n            </div>\n          ) : (\n            <div className=\"text-center text-sm text-charcoal/60\">\n              {MAX_PHOTOS - uploadedPhotosCount} more photos remaining\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Upload Status Message */}\n      {uploadStatus && (\n        <Card className=\"mb-6\">\n          <CardContent className=\"py-4\">\n            <div className=\"text-center\">\n              <p className=\"text-charcoal font-medium\">{uploadStatus}</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Main Upload Section */}\n      <Card className=\"mb-6\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-xl\">Share Your Beautiful Photos</CardTitle>\n          <CardDescription>\n            Upload your favorite moments from our special day\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Upload Component */}\n          <div className=\"flex justify-center\">\n            {uploadedPhotosCount >= MAX_PHOTOS ? (\n              <div className=\"text-center py-4\">\n                <p className=\"text-charcoal/70 mb-4\">You've reached the maximum number of photos!</p>\n                <Button disabled className=\"opacity-50\">\n                  <Camera className=\"w-5 h-5 mr-2\" />\n                  Maximum Reached\n                </Button>\n              </div>\n            ) : (\n              <ObjectUploader\n                maxNumberOfFiles={Math.min(25, MAX_PHOTOS - uploadedPhotosCount)}\n                maxFileSize={10485760} // 10MB\n                onGetUploadParameters={handleGetUploadParameters}\n                onComplete={handleUploadComplete}\n                buttonClassName=\"bg-softGold hover:bg-softGold/90 text-white px-8 py-4 rounded-lg font-medium transition-colors duration-300 transform hover:scale-105 flex items-center text-lg\"\n              >\n                <Camera className=\"w-5 h-5 mr-2\" />\n                Ավելացնել նկարներ\n              </ObjectUploader>\n            )}\n          </div>\n          \n          {/* Instructions */}\n          <div className=\"text-center text-sm text-charcoal/70 space-y-2\">\n            <p>• You can upload up to {MAX_PHOTOS} photos total</p>\n            <p>• You can upload {Math.min(25, MAX_PHOTOS - uploadedPhotosCount)} photos in one batch</p>\n            <p>• Maximum file size: 10MB per photo</p>\n            <p>• Supported formats: JPG, PNG, GIF</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Instructions Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">How to Share Photos</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3 text-sm text-charcoal/70\">\n          <div className=\"flex items-start gap-3\">\n            <span className=\"bg-softGold text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold\">1</span>\n            <p>Click \"Ավելացնել նկարներ\" button above</p>\n          </div>\n          <div className=\"flex items-start gap-3\">\n            <span className=\"bg-softGold text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold\">2</span>\n            <p>Choose photos from your gallery or take new ones</p>\n          </div>\n          <div className=\"flex items-start gap-3\">\n            <span className=\"bg-softGold text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold\">3</span>\n            <p>Your photos will be automatically uploaded to our wedding gallery</p>\n          </div>\n          <div className=\"mt-4 p-3 bg-softGold/10 rounded-lg\">\n            <p className=\"text-charcoal font-medium\">Thank you for helping us capture our special day! ❤️</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9753},"server/generate-qr.js":{"content":"import QRCode from 'qrcode';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nasync function generateQRCode() {\n  const url = 'https://harutandtatev.com/photos';\n  const outputPath = path.join(__dirname, '../client/public/wedding-photos-qr.png');\n  \n  try {\n    // Generate QR code with custom options\n    await QRCode.toFile(outputPath, url, {\n      width: 300,\n      margin: 2,\n      color: {\n        dark: '#2c3e50',  // Dark color for QR code\n        light: '#F8F6F1'  // Cream background to match wedding theme\n      }\n    });\n    \n    console.log('✅ QR Code generated successfully!');\n    console.log(`📱 QR Code saved to: ${outputPath}`);\n    console.log(`🔗 URL: ${url}`);\n  } catch (err) {\n    console.error('❌ Error generating QR code:', err);\n  }\n}\n\ngenerateQRCode();","size_bytes":917}},"version":1}