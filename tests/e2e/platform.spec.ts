import { test, expect } from '@playwright/test';\n\ntest.describe('Wedding Platform - End-to-End Tests', () => {\n  \n  test.describe('Guest User Journey', () => {\n    test('should display main landing page correctly', async ({ page }) => {\n      await page.goto('/');\n      \n      // Check main page loads\n      await expect(page).toHaveTitle(/Wedding/i);\n      \n      // Check navigation elements\n      await expect(page.locator('nav')).toBeVisible();\n      \n      // Check if there are any JavaScript errors\n      page.on('pageerror', (error) => {\n        console.error('Page error:', error.message);\n      });\n    });\n\n    test('should navigate to templates page', async ({ page }) => {\n      await page.goto('/');\n      \n      // Navigate to templates\n      await page.click('text=Templates');\n      \n      // Verify templates page loads\n      await expect(page.locator('h1')).toContainText(/Templates|Choose/);\n      \n      // Check if templates are displayed\n      const templates = page.locator('[data-testid=\"template-card\"], .template-card');\n      await expect(templates.first()).toBeVisible({ timeout: 10000 });\n    });\n\n    test('should access a specific template', async ({ page }) => {\n      // Go directly to a template (assuming default template exists)\n      await page.goto('/harut-tatev-2025'); // Using the slug from the original config\n      \n      // Wait for template to load\n      await page.waitForLoadState('networkidle');\n      \n      // Check hero section\n      await expect(page.locator('.hero, [data-section=\"hero\"]')).toBeVisible({ timeout: 15000 });\n      \n      // Check couple names are displayed\n      const coupleNames = page.locator('text=/Harut|Tatev|Հարութ|Տաթև/');\n      await expect(coupleNames.first()).toBeVisible();\n      \n      // Check navigation works\n      const navLinks = page.locator('nav a, .navigation a');\n      await expect(navLinks.first()).toBeVisible();\n    });\n  });\n\n  test.describe('RSVP Functionality', () => {\n    test('should submit RSVP successfully', async ({ page }) => {\n      await page.goto('/harut-tatev-2025');\n      \n      // Navigate to RSVP section\n      await page.click('text=/RSVP|Հաստատում/');\n      \n      // Wait for RSVP form to be visible\n      await expect(page.locator('form')).toBeVisible({ timeout: 10000 });\n      \n      // Fill out RSVP form\n      await page.fill('input[name=\"firstName\"], #firstName', 'Test');\n      await page.fill('input[name=\"lastName\"], #lastName', 'User');\n      await page.fill('input[name=\"email\"], #email', 'test@example.com');\n      await page.fill('input[name=\"guestCount\"], #guestCount', '2');\n      \n      // Select attendance\n      await page.check('input[value=\"attending\"]');\n      \n      // Submit form\n      await page.click('button[type=\"submit\"]');\n      \n      // Check for success message\n      const successMessage = page.locator('text=/success|thank you|շնորհակալություն/i');\n      await expect(successMessage).toBeVisible({ timeout: 10000 });\n    });\n\n    test('should validate required RSVP fields', async ({ page }) => {\n      await page.goto('/harut-tatev-2025');\n      \n      // Navigate to RSVP section\n      await page.click('text=/RSVP|Հաստատում/');\n      \n      // Wait for form\n      await expect(page.locator('form')).toBeVisible();\n      \n      // Try to submit without filling required fields\n      await page.click('button[type=\"submit\"]');\n      \n      // Check for validation errors\n      const errorMessages = page.locator('.error, [role=\"alert\"], .text-red');\n      await expect(errorMessages.first()).toBeVisible({ timeout: 5000 });\n    });\n  });\n\n  test.describe('Photo Gallery', () => {\n    test('should display photo gallery', async ({ page }) => {\n      await page.goto('/harut-tatev-2025');\n      \n      // Navigate to photos section\n      await page.click('text=/Photos|Լուսանկարներ/');\n      \n      // Check if photo gallery loads\n      const photoSection = page.locator('.photos, [data-section=\"photos\"], .gallery');\n      await expect(photoSection).toBeVisible({ timeout: 10000 });\n    });\n\n    test('should handle photo upload (if enabled)', async ({ page }) => {\n      await page.goto('/harut-tatev-2025');\n      \n      // Navigate to photos\n      await page.click('text=/Photos|Լուսանկարներ/');\n      \n      // Look for upload button\n      const uploadButton = page.locator('button:has-text(\"Upload\"), button:has-text(\"Վերբեռնել\")');\n      \n      if (await uploadButton.count() > 0) {\n        await uploadButton.click();\n        \n        // Check if upload interface appears\n        const uploadModal = page.locator('.modal, .dialog, [role=\"dialog\"]');\n        await expect(uploadModal).toBeVisible({ timeout: 5000 });\n      }\n    });\n  });\n\n  test.describe('Admin Panel Access', () => {\n    test('should access admin login page', async ({ page }) => {\n      await page.goto('/admin/login');\n      \n      // Check login form is displayed\n      await expect(page.locator('form')).toBeVisible();\n      await expect(page.locator('input[type=\"email\"], input[name=\"email\"]')).toBeVisible();\n      await expect(page.locator('input[type=\"password\"], input[name=\"password\"]')).toBeVisible();\n    });\n\n    test('should handle invalid admin credentials', async ({ page }) => {\n      await page.goto('/admin/login');\n      \n      // Fill invalid credentials\n      await page.fill('input[type=\"email\"], input[name=\"email\"]', 'invalid@test.com');\n      await page.fill('input[type=\"password\"], input[name=\"password\"]', 'wrongpassword');\n      \n      // Submit form\n      await page.click('button[type=\"submit\"]');\n      \n      // Check for error message\n      const errorMessage = page.locator('.error, [role=\"alert\"], .text-red');\n      await expect(errorMessage).toBeVisible({ timeout: 5000 });\n    });\n  });\n\n  test.describe('Platform Admin', () => {\n    test('should access platform admin login', async ({ page }) => {\n      await page.goto('/platform-admin/login');\n      \n      // Check platform admin login form\n      await expect(page.locator('form')).toBeVisible();\n      await expect(page.locator('input[name=\"username\"], input[type=\"text\"]')).toBeVisible();\n      await expect(page.locator('input[type=\"password\"]')).toBeVisible();\n    });\n  });\n\n  test.describe('Mobile Responsiveness', () => {\n    test('should work properly on mobile devices', async ({ page }) => {\n      // Set mobile viewport\n      await page.setViewportSize({ width: 375, height: 667 });\n      \n      await page.goto('/harut-tatev-2025');\n      \n      // Check mobile navigation\n      const mobileNav = page.locator('.mobile-nav, [data-mobile-nav], .hamburger');\n      if (await mobileNav.count() > 0) {\n        await expect(mobileNav).toBeVisible();\n      }\n      \n      // Check content is readable on mobile\n      const content = page.locator('main, .content');\n      await expect(content).toBeVisible();\n      \n      // Test RSVP form on mobile\n      await page.click('text=/RSVP|Հաստատում/');\n      const form = page.locator('form');\n      await expect(form).toBeVisible();\n    });\n  });\n\n  test.describe('Performance and Loading', () => {\n    test('should load pages within reasonable time', async ({ page }) => {\n      const startTime = Date.now();\n      \n      await page.goto('/harut-tatev-2025');\n      await page.waitForLoadState('networkidle');\n      \n      const loadTime = Date.now() - startTime;\n      \n      // Should load within 10 seconds\n      expect(loadTime).toBeLessThan(10000);\n    });\n\n    test('should not have console errors', async ({ page }) => {\n      const consoleErrors: string[] = [];\n      \n      page.on('console', (message) => {\n        if (message.type() === 'error') {\n          consoleErrors.push(message.text());\n        }\n      });\n      \n      await page.goto('/harut-tatev-2025');\n      await page.waitForLoadState('networkidle');\n      \n      // Filter out known acceptable errors (like network errors in dev)\n      const criticalErrors = consoleErrors.filter(error => \n        !error.includes('net::') && \n        !error.includes('favicon') &&\n        !error.includes('WebSocket')\n      );\n      \n      expect(criticalErrors).toHaveLength(0);\n    });\n  });\n});