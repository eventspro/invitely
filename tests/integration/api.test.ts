// API Integration Tests\nimport { describe, it, expect, beforeAll, afterAll } from 'vitest';\nimport request from 'supertest';\nimport { app } from '../../server/index';\nimport { testUtils } from '../setup';\n\ndescribe('Wedding Platform API Tests', () => {\n  let testTemplateId: string;\n\n  beforeAll(async () => {\n    // Create test template\n    const template = await testUtils.createTestTemplate();\n    testTemplateId = template.id;\n  });\n\n  afterAll(async () => {\n    // Cleanup\n    if (testTemplateId) {\n      await testUtils.cleanupTestTemplate(testTemplateId);\n    }\n  });\n\n  describe('Health and Basic Routes', () => {\n    it('should return health status', async () => {\n      const response = await request(app)\n        .get('/health')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('status', 'ok');\n      expect(response.body).toHaveProperty('timestamp');\n    });\n\n    it('should return API test status', async () => {\n      const response = await request(app)\n        .get('/api/test')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('message', 'Server is running');\n      expect(response.body).toHaveProperty('hasDatabase', true);\n    });\n  });\n\n  describe('Template System', () => {\n    it('should fetch template configuration', async () => {\n      const response = await request(app)\n        .get(`/api/templates/${testTemplateId}/config`)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('config');\n      expect(response.body.config).toHaveProperty('couple');\n      expect(response.body.config).toHaveProperty('wedding');\n    });\n\n    it('should handle non-existent template', async () => {\n      await request(app)\n        .get('/api/templates/non-existent-id/config')\n        .expect(404);\n    });\n  });\n\n  describe('RSVP System', () => {\n    it('should submit valid RSVP', async () => {\n      const rsvpData = testUtils.createTestRSVP(testTemplateId);\n      \n      const response = await request(app)\n        .post(`/api/templates/${testTemplateId}/rsvps`)\n        .send(rsvpData)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('id');\n      expect(response.body).toHaveProperty('firstName', 'John');\n    });\n\n    it('should reject invalid RSVP data', async () => {\n      const invalidRsvp = {\n        templateId: testTemplateId,\n        // Missing required fields\n      };\n\n      await request(app)\n        .post(`/api/templates/${testTemplateId}/rsvps`)\n        .send(invalidRsvp)\n        .expect(400);\n    });\n\n    it('should fetch RSVP list for template', async () => {\n      const response = await request(app)\n        .get(`/api/admin/templates/${testTemplateId}/rsvps`)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n  });\n});