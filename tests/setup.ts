import { beforeAll, afterAll, beforeEach } from 'vitest';\nimport { config } from 'dotenv';\nimport { db } from '../server/db';\nimport { templates, rsvps, guestPhotos } from '../shared/schema';\nimport { eq } from 'drizzle-orm';\n\n// Load test environment variables\nconfig({ path: '.env' });\n\n// Test database setup\nbeforeAll(async () => {\n  console.log('🧪 Setting up test environment...');\n  \n  // Verify database connection\n  try {\n    await db.select().from(templates).limit(1);\n    console.log('✅ Database connection successful');\n  } catch (error) {\n    console.error('❌ Database connection failed:', error);\n    throw error;\n  }\n});\n\nbeforeEach(async () => {\n  // Clean up test data before each test\n  console.log('🧹 Cleaning up test data...');\n});\n\nafterAll(async () => {\n  console.log('🏁 Test cleanup completed');\n});\n\n// Test utilities\nexport const testUtils = {\n  // Create a test template\n  createTestTemplate: async (templateKey = 'pro', slug = 'test-template') => {\n    const testConfig = {\n      couple: {\n        groomName: 'Test Groom',\n        brideName: 'Test Bride',\n        combinedNames: 'Test Groom & Test Bride'\n      },\n      wedding: {\n        date: '2025-12-31T16:00:00',\n        displayDate: 'December 31st, 2025',\n        month: 'December',\n        day: '31st'\n      },\n      hero: {\n        invitation: 'You are invited to our test wedding',\n        welcomeMessage: 'Test welcome message',\n        musicButton: 'Play Music',\n        playIcon: '▶️',\n        pauseIcon: '⏸️'\n      },\n      // Add minimal required config...\n    };\n\n    const [template] = await db.insert(templates).values({\n      name: `Test Template - ${slug}`,\n      slug,\n      templateKey,\n      config: testConfig,\n      maintenance: false\n    }).returning();\n\n    return template;\n  },\n\n  // Clean up test template\n  cleanupTestTemplate: async (templateId: string) => {\n    await db.delete(rsvps).where(eq(rsvps.templateId, templateId));\n    await db.delete(guestPhotos).where(eq(guestPhotos.templateId, templateId));\n    await db.delete(templates).where(eq(templates.id, templateId));\n  },\n\n  // Create test RSVP\n  createTestRSVP: (templateId: string) => ({\n    templateId,\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'john.doe@test.com',\n    guestEmail: 'john.doe@test.com',\n    guestCount: '2',\n    guestNames: 'John Doe, Jane Doe',\n    attendance: 'attending' as const,\n    attending: true,\n    guests: 2\n  })\n};
