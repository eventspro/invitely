#!/usr/bin/env node\n// Production Hotfixes for Wedding Platform\n// This script applies critical fixes to resolve production bugs\n\nimport { writeFileSync, readFileSync, existsSync } from 'fs';\nimport { join } from 'path';\n\nconsole.log('üöÄ Applying Production Hotfixes for Wedding Platform');\nconsole.log('='.repeat(50));\n\n// Fix 1: Add proper error handling to template routes\nfunction applyTemplateRoutesFix() {\n  console.log('\\nüìù Applying Template Routes Fix...');\n  \n  const templateRoutesPath = join(process.cwd(), 'server', 'routes', 'templates.ts');\n  \n  if (!existsSync(templateRoutesPath)) {\n    console.log('‚ùå Template routes file not found');\n    return;\n  }\n  \n  let content = readFileSync(templateRoutesPath, 'utf-8');\n  \n  // Add import for 'or' operator\n  if (!content.includes('import { z } from \"zod\"')) {\n    content = content.replace(\n      'import { z } from \"zod\";',\n      'import { z } from \"zod\";\\nimport { or } from \"drizzle-orm\";'\n    );\n  }\n  \n  // Fix RSVP duplicate email check\n  const duplicateCheckPattern = /const existingRsvp = await storage\\.getRsvpByEmail\\(validatedData\\.email, templateId\\);/;\n  if (duplicateCheckPattern.test(content)) {\n    content = content.replace(\n      duplicateCheckPattern,\n      `// Check both email fields for duplicates\n      const emailToCheck = validatedData.guestEmail || validatedData.email;\n      const existingRsvp = await storage.getRsvpByEmail(emailToCheck, templateId);`\n    );\n    \n    console.log('‚úÖ Fixed RSVP duplicate email check');\n  }\n  \n  writeFileSync(templateRoutesPath, content);\n}\n\n// Fix 2: Enhance storage layer with better error handling\nfunction applyStorageEnhancements() {\n  console.log('\\nüìù Applying Storage Layer Enhancements...');\n  \n  const storagePath = join(process.cwd(), 'server', 'storage.ts');\n  \n  if (!existsSync(storagePath)) {\n    console.log('‚ùå Storage file not found');\n    return;\n  }\n  \n  let content = readFileSync(storagePath, 'utf-8');\n  \n  // Add 'or' import if missing\n  if (!content.includes(', or ')) {\n    content = content.replace(\n      'import { eq, desc, and } from \"drizzle-orm\";',\n      'import { eq, desc, and, or } from \"drizzle-orm\";'\n    );\n  }\n  \n  // Enhance getRsvpByEmail to check both email fields\n  const rsvpEmailPattern = /async getRsvpByEmail\\(email: string, templateId: string\\): Promise<Rsvp \\| undefined> {[\\s\\S]*?return rsvp \\|\\| undefined;\\s*}/;\n  \n  if (rsvpEmailPattern.test(content)) {\n    const newMethod = `async getRsvpByEmail(email: string, templateId: string): Promise<Rsvp | undefined> {\n    try {\n      console.log(\\`Checking for existing RSVP with email: \\${email} for template: \\${templateId}\\`);\n      \n      const [rsvp] = await db\n        .select()\n        .from(rsvps)\n        .where(and(\n          eq(rsvps.templateId, templateId),\n          // Check both email fields to handle legacy and new data\n          or(\n            eq(rsvps.email, email), \n            eq(rsvps.guestEmail, email)\n          )\n        ))\n        .limit(1);\n      \n      if (rsvp) {\n        console.log(\\`Found existing RSVP: \\${rsvp.firstName} \\${rsvp.lastName}\\`);\n      }\n      \n      return rsvp || undefined;\n    } catch (error) {\n      console.error('Error checking RSVP by email:', error);\n      // Fallback to original behavior\n      const [rsvp] = await db\n        .select()\n        .from(rsvps)\n        .where(and(eq(rsvps.email, email), eq(rsvps.templateId, templateId)));\n      return rsvp || undefined;\n    }\n  }`;\n    \n    content = content.replace(rsvpEmailPattern, newMethod);\n    console.log('‚úÖ Enhanced RSVP email checking');\n  }\n  \n  writeFileSync(storagePath, content);\n}\n\n// Fix 3: Add proper error responses to main routes\nfunction applyRouteErrorHandling() {\n  console.log('\\nüìù Applying Route Error Handling...');\n  \n  const routesPath = join(process.cwd(), 'server', 'routes.ts');\n  \n  if (!existsSync(routesPath)) {\n    console.log('‚ùå Routes file not found');\n    return;\n  }\n  \n  let content = readFileSync(routesPath, 'utf-8');\n  \n  // Add error response helper at the top of the file\n  if (!content.includes('function createErrorResponse')) {\n    const errorHelperCode = `\\n// Error response helper\\nfunction createErrorResponse(message: string, code?: string, details?: any) {\\n  return {\\n    error: true,\\n    message,\\n    code,\\n    details,\\n    timestamp: new Date().toISOString()\\n  };\\n}\\n`;\n    \n    content = content.replace(\n      'export async function registerRoutes',\n      errorHelperCode + '\\nexport async function registerRoutes'\n    );\n    \n    console.log('‚úÖ Added error response helper');\n  }\n  \n  // Improve template config endpoint error handling\n  if (content.includes('Template not found by ID or slug')) {\n    content = content.replace(\n      /console\\.log\\(`‚ùå Template not found by ID or slug: \\$\\{templateId\\}`\\);/,\n      `console.log(\\`Template not found: \\${templateId}\\`);\n      console.log('Available templates:', await storage.getAllTemplates().then(t => t.map(tmpl => ({ id: tmpl.id, slug: tmpl.slug }))));\n      `\n    );\n    \n    console.log('‚úÖ Enhanced template not found logging');\n  }\n  \n  writeFileSync(routesPath, content);\n}\n\n// Fix 4: Add comprehensive validation middleware\nfunction addValidationMiddleware() {\n  console.log('\\nüìù Adding Validation Middleware...');\n  \n  const middlewarePath = join(process.cwd(), 'server', 'middleware', 'validation.ts');\n  \n  const validationMiddleware = `// Request validation middleware\nimport { Request, Response, NextFunction } from 'express';\nimport { z } from 'zod';\n\nexport function validateTemplateId(req: Request, res: Response, next: NextFunction) {\n  const { templateId, identifier } = req.params;\n  const id = templateId || identifier;\n  \n  if (!id) {\n    return res.status(400).json({\n      error: true,\n      message: 'Template ID or identifier is required',\n      code: 'MISSING_TEMPLATE_ID'\n    });\n  }\n  \n  // Sanitize template identifier\n  const sanitized = id.replace(/[^a-zA-Z0-9-_]/g, '');\n  if (!sanitized || sanitized !== id) {\n    return res.status(400).json({\n      error: true,\n      message: 'Invalid template identifier format',\n      code: 'INVALID_TEMPLATE_ID'\n    });\n  }\n  \n  next();\n}\n\nexport function validateRsvpData(req: Request, res: Response, next: NextFunction) {\n  const requiredFields = ['firstName', 'lastName', 'email', 'attendance'];\n  const missing = requiredFields.filter(field => !req.body[field]);\n  \n  if (missing.length > 0) {\n    return res.status(400).json({\n      error: true,\n      message: 'Missing required fields',\n      code: 'MISSING_REQUIRED_FIELDS',\n      details: { missingFields: missing }\n    });\n  }\n  \n  // Validate email format\n  const emailRegex = /^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/;\n  if (!emailRegex.test(req.body.email) && !emailRegex.test(req.body.guestEmail)) {\n    return res.status(400).json({\n      error: true,\n      message: 'Invalid email format',\n      code: 'INVALID_EMAIL'\n    });\n  }\n  \n  next();\n}\n\nexport function handleDatabaseErrors(error: any, req: Request, res: Response, next: NextFunction) {\n  console.error('Database error:', error);\n  \n  // Handle specific database errors\n  if (error.code === '23505') { // Unique constraint violation\n    return res.status(409).json({\n      error: true,\n      message: 'Duplicate entry detected',\n      code: 'DUPLICATE_ENTRY'\n    });\n  }\n  \n  if (error.code === '23503') { // Foreign key constraint\n    return res.status(400).json({\n      error: true,\n      message: 'Invalid reference detected',\n      code: 'INVALID_REFERENCE'\n    });\n  }\n  \n  // Generic database error\n  res.status(500).json({\n    error: true,\n    message: 'Database operation failed',\n    code: 'DATABASE_ERROR'\n  });\n}\n`;\n  \n  try {\n    writeFileSync(middlewarePath, validationMiddleware);\n    console.log('‚úÖ Created validation middleware');\n  } catch (error) {\n    console.log('‚ùå Could not create validation middleware:', error);\n  }\n}\n\n// Fix 5: Update Vercel configuration for better production handling\nfunction updateVercelConfig() {\n  console.log('\\nüìù Updating Vercel Configuration...');\n  \n  const vercelConfigPath = join(process.cwd(), 'vercel.json');\n  \n  if (!existsSync(vercelConfigPath)) {\n    console.log('‚ùå vercel.json not found');\n    return;\n  }\n  \n  const config = JSON.parse(readFileSync(vercelConfigPath, 'utf-8'));\n  \n  // Add better error handling and headers\n  if (!config.functions) {\n    config.functions = {\n      'server/index.ts': {\n        maxDuration: 30\n      }\n    };\n  }\n  \n  // Add better routing for template slugs\n  const templateRoutes = [\n    {\n      \"src\": \"/([a-zA-Z0-9-]+)/?$\",\n      \"dest\": \"/server/index.ts\",\n      \"check\": true\n    },\n    {\n      \"src\": \"/api/templates/([a-zA-Z0-9-]+)/(.*)$\",\n      \"dest\": \"/server/index.ts\"\n    }\n  ];\n  \n  // Insert template routes before catch-all\n  if (config.routes) {\n    const catchAllIndex = config.routes.findIndex((route: any) => route.src === '/(.*)');\n    if (catchAllIndex > -1) {\n      config.routes.splice(catchAllIndex, 0, ...templateRoutes);\n    }\n  }\n  \n  writeFileSync(vercelConfigPath, JSON.stringify(config, null, 2));\n  console.log('‚úÖ Updated Vercel configuration');\n}\n\n// Main execution\nasync function applyHotfixes() {\n  try {\n    applyTemplateRoutesFix();\n    applyStorageEnhancements();\n    applyRouteErrorHandling();\n    addValidationMiddleware();\n    updateVercelConfig();\n    \n    console.log('\\nüéâ All hotfixes applied successfully!');\n    console.log('\\nüìã Next Steps:');\n    console.log('1. Run: npm run build');\n    console.log('2. Run: npm run dev (to test locally)');\n    console.log('3. Deploy: vercel --prod');\n    console.log('4. Test all user flows');\n    \n    console.log('\\n‚ö†Ô∏è  Manual Testing Required:');\n    console.log('- Template loading by slug and ID');\n    console.log('- RSVP submission with duplicate emails');\n    console.log('- Image uploads and serving');\n    console.log('- Admin panel access');\n    console.log('- Error handling scenarios');\n    \n  } catch (error) {\n    console.error('‚ùå Error applying hotfixes:', error);\n    process.exit(1);\n  }\n}\n\n// Run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  applyHotfixes();\n}